{"version":3,"sources":["webpack://sitecore/./minecraft/backgroundgen.ts"],"names":["addImageToRow","elem","img","tile","document","createElement","className","appendChild","getDarkOverlay","cols","blocks","i","k","isTransparent","getRandomRawGenBlockAt","x","y","rows","skylim","Math","max","sin","cos","random","isWaterReplaceable","block","createWaterSource","terrain","idx","canSpread","idx2","idx3","modifyImageLocational","idxu","f","startsWith","genOreVein","ore","s","getOreVeinSize","rx","ry","mx","floor","my","px","min","py","ms","slopeX","slopeY","di","dk","dx","dy","getRandomRockType","list","push","length","getRandomOreType","generateTreeAt","sky","treeCtr","yCtr","spruce","h","r","birch","leaf","console","log","generatePylonAt","pylonCtr","top","setPageBackground","body","documentElement","rh","scrollHeight","rw","window","innerWidth","scrollWidth","ceil","Array","minSky","slope","skyH","n","lakeCtr","idxl","idxr","idxb","flag","count","plant","rr","generateSurface","w","bk","abs","shafts","facing","woff","twoSpawners","spawnerCol","generateStructures","generateCaves","veins","genRockVeins","genOreVeins","genGravelDirt","idxd","cleanFloatingBlocks","lavalevel","applyLiquids","tag","container","getElementById","id","prepend","firstChild","removeChild","tiles","style","width","height","row","add","dark","buildImage"],"mappings":"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","file":"162.bundle.js","sourcesContent":["const SCALE = 2;\r\nimport { time, xmas, hallow, getRandomBetween, getRandomDecimalBetween, getArrayIndex, fitBCG, isDarkModeEnabled } from '../library';\r\nimport { isPhone } from '../browser';\r\nfunction addImageToRow(elem, img) {\r\n    let tile = document.createElement('div');\r\n    tile.className = \"tile-minecraft-\" + img;\r\n    elem.appendChild(tile);\r\n    return tile;\r\n}\r\nfunction buildImage(elem, rows, cols, terrain) {\r\n    var w = 16 * SCALE;\r\n    var h = 16 * SCALE;\r\n    var x = 0;\r\n    var y = 0;\r\n    for (var k = 0; k < rows; k++) {\r\n        x = 0;\r\n        let row = document.createElement(\"div\");\r\n        for (var i = 0; i < cols; i++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            var img = terrain[idx];\r\n            //console.log(\"Got \"+img+\" @ \"+i+\", \"+k);\r\n            img = modifyImageLocational(rows, cols, terrain, i, k, idx, img);\r\n            let add = row;\r\n            if (isTransparent(img))\r\n                add = addImageToRow(row, \"cave\");\r\n            if (img != \"air\") {\r\n                add = addImageToRow(add, img);\r\n            }\r\n            if (isDarkModeEnabled()) {\r\n                let dark = getDarkOverlay(img, cols, terrain, i, k);\r\n                if (dark != \"air\")\r\n                    add = addImageToRow(add, dark);\r\n                //if (img.includes(\"crystal\"))\r\n                //\tadd = addImageToRow(add, img+\"_glow\");\r\n            }\r\n            x += w;\r\n        }\r\n        elem.appendChild(row);\r\n        y += h;\r\n    }\r\n    fitBCG(elem, SCALE);\r\n}\r\nfunction getDarkOverlay(img, cols, blocks, i, k) {\r\n    switch (img) {\r\n        case \"mob_spawner\":\r\n            return \"dark_mob_spawner\";\r\n        case \"crystal_green\":\r\n            return \"dark_crystal_green\";\r\n        case \"crystal_white\":\r\n            return \"dark_crystal_white\";\r\n        case \"crystal_purple\":\r\n            return \"dark_crystal_purple\";\r\n        case \"redstone_ore\":\r\n            return \"dark_redstone_ore\";\r\n        case \"fluorite\":\r\n            return \"dark_fluorite\";\r\n        case \"log_night\":\r\n            return \"dark_glowlog\";\r\n        case \"leaves_night\":\r\n            return \"dark_glowleaves\";\r\n        case \"rune\":\r\n            return \"dark_rune\";\r\n        default:\r\n            return blocks[getArrayIndex(cols, i, k + 1)] == \"lava\" ? \"dark_weak\" : \"dark\";\r\n    }\r\n}\r\nfunction isTransparent(img) {\r\n    switch (img) {\r\n        case \"air\":\r\n        case \"mob_spawner\":\r\n        case \"web\":\r\n        case \"crystal_purple\":\r\n        case \"crystal_green\":\r\n        case \"crystal_white\":\r\n        case \"flower1\":\r\n        case \"flower2\":\r\n        //case \"sky\":\r\n        case \"tallgrass\":\r\n        case \"tallgrass_xmas\":\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction getRandomRawGenBlockAt(x, y, rows, skylim) {\r\n    if (y == 0) {\r\n        return \"grass_side\";\r\n    }\r\n    else if (y <= 4) {\r\n        var t = Math.max(1, 3 + Math.sin(time + x * 0.873) + Math.cos(time * 1.8734 + x * 0.7624));\r\n        if (y <= t)\r\n            return \"dirt\";\r\n    }\r\n    else if (y > rows - 4 - skylim) {\r\n        var layer = rows - y - skylim;\r\n        if (layer <= Math.random() * 5) {\r\n            return \"bedrock\";\r\n        }\r\n    }\r\n    return \"stone\";\r\n}\r\nfunction isWaterReplaceable(block) {\r\n    return block == \"air\" || block == \"cave\" || block == \"water\" || block == \"web\";\r\n}\r\nfunction createWaterSource(rows, cols, terrain, idx, x, y, canSpread) {\r\n    terrain[idx] = \"water\";\r\n    var idx2 = getArrayIndex(cols, x, y + 1);\r\n    if (terrain[idx2] == \"lava\") {\r\n        terrain[idx2] = \"obsidian\";\r\n    }\r\n    if (isWaterReplaceable(terrain[idx2])) {\r\n        createWaterSource(rows, cols, terrain, idx2, x, y + 1, true);\r\n    }\r\n    else if (canSpread) {\r\n        var flow = 2;\r\n        for (var i = 0; i <= flow; i++) {\r\n            var idx3 = getArrayIndex(cols, x + i, y);\r\n            //console.log(\"Spreading right into \"+terrain[idx3]);\r\n            if (isWaterReplaceable(terrain[idx3])) {\r\n                createWaterSource(rows, cols, terrain, idx3, x + i, y, false);\r\n                if (isWaterReplaceable(terrain[idx3 + cols])) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (var i = 0; i <= flow; i++) {\r\n            var idx3 = getArrayIndex(cols, x - i, y);\r\n            //console.log(\"Spreading left into \"+terrain[idx3]);\r\n            if (isWaterReplaceable(terrain[idx3])) {\r\n                createWaterSource(rows, cols, terrain, idx3, x - i, y, false);\r\n                if (isWaterReplaceable(terrain[idx3 + cols])) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applyLiquids(rows, cols, terrain) {\r\n    var lavalevel = Math.floor(rows * 0.8) - 1;\r\n    for (var k = lavalevel; k < rows; k++) {\r\n        for (var i = 0; i < cols; i++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            if (terrain[idx] == \"cave\")\r\n                terrain[idx] = \"lava\";\r\n        }\r\n    }\r\n    for (var k = 0; k <= lavalevel + 1; k++) {\r\n        for (var i = 0; i < cols; i++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            if (isWaterReplaceable(terrain[idx]) && Math.random() < 0.02) {\r\n                createWaterSource(rows, cols, terrain, idx, i, k, true);\r\n                //return;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction cleanFloatingBlocks(rows, cols, terrain) {\r\n    for (var k = 0; k < rows; k++) {\r\n        for (var i = 0; i < cols; i++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            var idxu = getArrayIndex(cols, i, k - 1);\r\n            var idxd = getArrayIndex(cols, i, k + 1);\r\n            var idxl = getArrayIndex(cols, i - 1, k);\r\n            var idxr = getArrayIndex(cols, i + 1, k);\r\n            if (terrain[idx] != \"cave\" && terrain[idxu] == \"cave\" && terrain[idxd] == \"cave\" && terrain[idxl] == \"cave\" && terrain[idxr] == \"cave\") {\r\n                terrain[idx] = \"cave\";\r\n                //console.log(\"Found floater at \"+i+\", \"+k);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction modifyImageLocational(rows, cols, terrain, x, y, idx, img) {\r\n    if (img == \"grass_side\") {\r\n        var idxu = getArrayIndex(cols, x, y - 1);\r\n        if (terrain[idxu] != \"sky\" && !isTransparent(terrain[idxu]))\r\n            img = \"dirt\";\r\n    }\r\n    if (xmas) {\r\n        if (img == \"grass_side\")\r\n            img = \"grass_side_xmas\";\r\n        if (img == \"crystalcol\")\r\n            img = \"crystalcol_xmas\";\r\n        if (img == \"tallgrass\")\r\n            img = \"tallgrass_xmas\";\r\n    }\r\n    if (img == \"tallgrass\" && hallow && Math.random() < 0.33)\r\n        img = \"pumpkin\";\r\n    if (Math.random() < 0.04 && img == \"cave\" && terrain[idx + cols] == \"stone\") {\r\n        var f = Math.random();\r\n        if (f < 0.33)\r\n            img = \"crystal_purple\";\r\n        else if (f < 0.67)\r\n            img = \"crystal_white\";\r\n        else\r\n            img = \"crystal_green\";\r\n    }\r\n    if (isDarkModeEnabled()) {\r\n        if (img == \"sky\" || img.startsWith(\"tallgrass\") || img.startsWith(\"flower\") || img == \"log\" || img == \"leaves\")\r\n            img = img + \"_night\";\r\n    }\r\n    return img;\r\n}\r\nfunction getOreVeinSize(ore) {\r\n    if (ore.startsWith(\"rock_\"))\r\n        return [2.25, 4.5];\r\n    switch (ore) {\r\n        case \"diamond_ore\":\r\n        case \"lapis_ore\":\r\n        case \"calcite\":\r\n            return [0.5, 1.5];\r\n        case \"iron_ore\":\r\n        case \"gold_ore\":\r\n        case \"copper_ore\":\r\n        case \"tin_ore\":\r\n        case \"nickel_ore\":\r\n        case \"cadmium\":\r\n        case \"indium\":\r\n            return [1.5, 3];\r\n        case \"redstone_ore\":\r\n        case \"coal_ore\":\r\n        case \"fluorite\":\r\n        case \"magnetite\":\r\n            return [2, 3.5];\r\n        case \"dirt\":\r\n        case \"gravel\":\r\n            return [2.5, 4];\r\n        case \"cave\":\r\n        case \"air\":\r\n            return [2.5, 5];\r\n        default:\r\n            return [0, 0];\r\n    }\r\n}\r\nfunction genOreVein(rows, cols, terrain, x, y, ore) {\r\n    var s = getOreVeinSize(ore);\r\n    //s[0] = 1;\r\n    //s[1] = 9;\r\n    var rx = getRandomDecimalBetween(s[0], s[1]);\r\n    var ry = getRandomDecimalBetween(s[0], s[1]);\r\n    var mx = Math.max(0, Math.floor(x - rx));\r\n    var my = Math.max(0, Math.floor(y - ry));\r\n    var px = Math.min(cols - 1, Math.floor(x + rx));\r\n    var py = Math.min(rows - 1, Math.floor(y + ry));\r\n    var ms = 0.75;\r\n    var slopeX = getRandomDecimalBetween(-ms, ms);\r\n    var slopeY = getRandomDecimalBetween(-ms, ms);\r\n    //console.log(\"Generated ore type \"+ore+\" @ \"+x+\", \"+y+\" with sizes \"+rx+\", \"+ry+\" to range \"+mx+\"->\"+px+\"; \"+my+\"->\"+py+\"; slopes are \"+slopeX+\", \"+slopeY);\r\n    for (var i = mx; i <= px; i++) {\r\n        for (var k = my; k <= py; k++) {\r\n            var di = i - x;\r\n            var dk = k - y;\r\n            if (di * di + dk * dk <= rx * ry + 0.5) {\r\n                var dx = i + Math.floor(slopeX * dk);\r\n                var dy = k + Math.floor(slopeY * di);\r\n                var idx = getArrayIndex(cols, dx, dy);\r\n                if (terrain[idx] == null || terrain[idx] == \"stone\" || terrain[idx].startsWith(\"rock_\") || (terrain[idx] == \"cobblestone\" && ore == \"cave\"))\r\n                    terrain[idx] = ore;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getRandomRockType(rows, y) {\r\n    var f = y / rows;\r\n    var list = [\"granite\", \"hornfel\", \"quartz\"];\r\n    if (f < 0.5) {\r\n        list.push(\"basalt\");\r\n        list.push(\"shale\");\r\n        list.push(\"limestone\");\r\n        list.push(\"sandstone\");\r\n    }\r\n    if (f < 0.75 && f > 0.25) {\r\n        list.push(\"slate\");\r\n        list.push(\"gneiss\");\r\n        list.push(\"granulite\");\r\n        list.push(\"schist\");\r\n    }\r\n    if (f > 0.5) {\r\n        list.push(\"marble\");\r\n        list.push(\"peridotite\");\r\n    }\r\n    if (f > 0.75) {\r\n        list.push(\"pumice\");\r\n        list.push(\"onyx\");\r\n        list.push(\"migmatite\");\r\n    }\r\n    return list[Math.floor(Math.random() * list.length)];\r\n}\r\nfunction getRandomOreType(rows, y) {\r\n    var f = y / rows;\r\n    var list = [\"coal_ore\"];\r\n    if (f > 0.2) {\r\n        list.push(\"iron_ore\");\r\n    }\r\n    if (f > 0.5) {\r\n        list.push(\"gold_ore\");\r\n        list.push(\"lapis_ore\");\r\n    }\r\n    if (f > 0.75) {\r\n        list.push(\"redstone_ore\");\r\n        list.push(\"diamond_ore\");\r\n        list.push(\"emerald_ore\");\r\n        list.push(\"cadmium\");\r\n        list.push(\"indium\");\r\n    }\r\n    if (f < 0.2) {\r\n        list.push(\"magnetite\");\r\n    }\r\n    if (f < 0.4) {\r\n        list.push(\"fluorite\");\r\n    }\r\n    if (f > 0.15 && f < 0.35) {\r\n        list.push(\"calcite\");\r\n    }\r\n    if (f > 0.1 && f < 0.5) {\r\n        //list.push(\"copper_ore\");\r\n        //list.push(\"tin_ore\");\r\n    }\r\n    if (f > 0.4 && f < 0.75) {\r\n        //list.push(\"nickel_ore\");\r\n    }\r\n    return list[Math.floor(Math.random() * list.length)];\r\n}\r\nfunction genOreVeins(rows, cols, terrain) {\r\n    var veins = rows * cols / 56;\r\n    //veins = 1;\r\n    for (var i = 0; i < veins; i++) {\r\n        var x = Math.floor(Math.random() * cols);\r\n        var y = Math.floor(Math.random() * rows);\r\n        var ore = getRandomOreType(rows, y);\r\n        genOreVein(rows, cols, terrain, x, y, ore);\r\n        //console.log(\"Generated \"+ore+\" at \"+x+\", \"+y);\r\n    }\r\n}\r\nfunction genRockVeins(rows, cols, terrain) {\r\n    var veins = rows * cols / 64;\r\n    //veins = 1;\r\n    for (var i = 0; i < veins; i++) {\r\n        var x = Math.floor(Math.random() * cols);\r\n        var y = Math.floor(Math.random() * rows);\r\n        var ore = \"rock_\" + getRandomRockType(rows, y);\r\n        genOreVein(rows, cols, terrain, x, y, ore);\r\n        //console.log(\"Generated \"+ore+\" at \"+x+\", \"+y);\r\n    }\r\n}\r\nfunction genGravelDirt(rows, cols, terrain) {\r\n    var veins = rows * cols / 150;\r\n    for (var i = 0; i < veins; i++) {\r\n        var x = Math.floor(Math.random() * cols);\r\n        var y = Math.floor(Math.random() * rows);\r\n        var ore = Math.random() < 0.5 ? \"gravel\" : \"dirt\";\r\n        genOreVein(rows, cols, terrain, x, y, ore);\r\n    }\r\n}\r\nfunction generateCaves(rows, cols, terrain) {\r\n    for (var i = 0; i < 8; i++) {\r\n        var x = getRandomBetween(0, cols);\r\n        var y = getRandomBetween(0, rows);\r\n        genOreVein(rows, cols, terrain, x, y, \"cave\");\r\n    }\r\n}\r\nfunction generateStructures(rows, cols, terrain, skylim) {\r\n    if (Math.random() < 0.75) {\r\n        var x = getRandomBetween(2, cols - 2);\r\n        var y = getRandomBetween(skylim + 4, rows - 7);\r\n        console.log(\"Generating a dungeon @ \" + x + \", \" + y);\r\n        var w = Math.random() < 0.5 ? 4 : 3;\r\n        var h = Math.min(w, Math.random() < 0.5 ? 4 : 3);\r\n        for (var i = -w; i <= w; i++) {\r\n            for (var k = 0; k <= h; k++) {\r\n                var dx = x + i;\r\n                var dy = y + k;\r\n                var bk = \"cobblestone\";\r\n                if (k == h) {\r\n                    if (Math.random() < 0.75)\r\n                        bk = \"cobblestone_mossy\";\r\n                }\r\n                else if (k == h - 1 && i == 0) {\r\n                    bk = \"mob_spawner\";\r\n                }\r\n                else if (Math.abs(i) != w) {\r\n                    bk = \"air\";\r\n                }\r\n                var idx = getArrayIndex(cols, dx, dy);\r\n                terrain[idx] = bk;\r\n            }\r\n        }\r\n    }\r\n    if (Math.random() < 0.75) {\r\n        var shafts = getRandomBetween(1, 3);\r\n        console.log(\"Generating \" + shafts + \" mineshaft pieces.\");\r\n        for (var s = 0; s < shafts; s++) {\r\n            var facing = Math.random() < 0.8;\r\n            var y = getRandomBetween(skylim + 4, rows - 5);\r\n            if (facing) {\r\n                var x = getRandomBetween(1, cols - 1);\r\n                for (var i = -1; i <= 1; i++) {\r\n                    for (var k = 0; k <= 2; k++) {\r\n                        var dx = x + i;\r\n                        var dy = y + k;\r\n                        var bk = \"cave\";\r\n                        if (k == 0)\r\n                            bk = \"planks_oak\";\r\n                        else if (Math.random() < 0.4 && Math.abs(i) == 1)\r\n                            bk = \"planks_oak\";\r\n                        if (Math.random() < 0.15)\r\n                            bk = bk == \"cave\" ? \"web\" : \"web_on_wood\";\r\n                        var idx = getArrayIndex(cols, dx, dy);\r\n                        terrain[idx] = bk;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var w = getRandomBetween(5, Math.ceil(cols / 3));\r\n                var x = getRandomBetween(w, cols - w);\r\n                var woff = getRandomBetween(0, 5);\r\n                var twoSpawners = Math.random() < 0.5;\r\n                for (var i = -w; i <= w; i++) {\r\n                    for (var k = 0; k <= 2; k++) {\r\n                        var dx = x + i;\r\n                        var dy = y + k;\r\n                        var bk = \"cave\";\r\n                        var spawnerCol = twoSpawners ? (i == 0) : (Math.abs(i) == Math.floor(w / 1.5));\r\n                        var woodCol = (i + 256) % 6 == woff;\r\n                        if (woodCol) {\r\n                            bk = \"planks_oak\";\r\n                        }\r\n                        if (k == 2 && spawnerCol) {\r\n                            bk = \"mob_spawner\";\r\n                        }\r\n                        else if (Math.random() < 0.67)\r\n                            bk = bk == \"cave\" ? \"web\" : \"web_on_wood\";\r\n                        var idx = getArrayIndex(cols, dx, dy);\r\n                        terrain[idx] = bk;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction generateSurface(rows, cols, terrain, sky) {\r\n    for (var n = 0; n < 2; n++) {\r\n        var lakeCtr = getRandomBetween(3, cols - 3);\r\n        for (var i = lakeCtr - 2; i <= lakeCtr + 2; i++) {\r\n            var idxl = getArrayIndex(cols, i - 1, sky[i]);\r\n            var idxr = getArrayIndex(cols, i + 1, sky[i]);\r\n            if ((terrain[idxl] == \"grass_side\" || terrain[idxl] == \"water\" || terrain[idxl] == \"ice\" || terrain[idxl] == \"dirt\") && (terrain[idxr] == \"grass_side\" || terrain[idxr] == \"ice\" || terrain[idxr] == \"water\" || terrain[idxr] == \"dirt\")) {\r\n                var idxb = getArrayIndex(cols, i, sky[i] + 1);\r\n                var idx = getArrayIndex(cols, i, sky[i]);\r\n                terrain[idx] = xmas ? \"ice\" : \"water\";\r\n                if (terrain[idxb] == \"dirt\")\r\n                    terrain[idxb] = \"grass_side\";\r\n            }\r\n        }\r\n    }\r\n    var flag = false;\r\n    for (var n = 0; n < 2 && !flag; n++) {\r\n        var pylonCtr = getRandomBetween(3, cols - 3);\r\n        flag = generatePylonAt(rows, cols, terrain, sky, pylonCtr);\r\n    }\r\n    var count = 0;\r\n    for (var n = 0; n < (xmas ? 8 : 4) && count < 3; n++) {\r\n        var treeCtr = getRandomBetween(3, cols - 3);\r\n        if (generateTreeAt(rows, cols, terrain, sky, treeCtr))\r\n            count++;\r\n    }\r\n    /*\r\n    if (Math.random() < 0.6) {\r\n        var burrowCtr = getRandomBetween(6, cols-6);\r\n        generateBurrowAt(rows, cols, terrain, sky, burrowCtr);\r\n    }*/\r\n    for (var i = 0; i < rows; i++) {\r\n        if (sky[i] > 0 && Math.random() < 0.6) {\r\n            var idx0 = getArrayIndex(cols, i, sky[i]);\r\n            if (terrain[idx0] == \"grass_side\") {\r\n                var idx = getArrayIndex(cols, i, sky[i] - 1);\r\n                if (terrain[idx] == \"sky\") {\r\n                    var plant = \"tallgrass\";\r\n                    var rr = Math.random();\r\n                    if (rr < 0.1)\r\n                        plant = \"flower2\";\r\n                    else if (rr < 0.25)\r\n                        plant = \"flower1\";\r\n                    terrain[idx] = plant;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction generateTreeAt(rows, cols, terrain, sky, treeCtr) {\r\n    let yCtr = sky[treeCtr];\r\n    if (yCtr <= 4)\r\n        return false;\r\n    var spruce = xmas; //Math.random() <= 0.25;\r\n    var h = Math.min(yCtr - 1, spruce ? getRandomBetween(8, 12) : getRandomBetween(4, 8));\r\n    //console.log(h);\r\n    if (h <= (spruce ? 8 : 5))\r\n        return false;\r\n    //console.log(\"Trying tree @ \"+treeCtr+\", \"+yCtr);\r\n    if (terrain[getArrayIndex(cols, treeCtr - 2, yCtr - h)] != \"sky\") {\r\n        //console.log(\"Space blocked @ \"+(treeCtr-2)+\", \"+(yCtr-h)+\": \"+terrain[getArrayIndex(cols, treeCtr-2, yCtr-h)]);\r\n        return false;\r\n    }\r\n    if (terrain[getArrayIndex(cols, treeCtr + 2, yCtr - h)] != \"sky\") {\r\n        //console.log(\"Space blocked @ \"+(treeCtr+2)+\", \"+(yCtr-h)+\": \"+terrain[getArrayIndex(cols, treeCtr+2, yCtr-h)]);\r\n        return false;\r\n    }\r\n    if (terrain[getArrayIndex(cols, treeCtr, yCtr - h)] != \"sky\") {\r\n        //console.log(\"Space blocked @ \"+(treeCtr)+\", \"+(yCtr-h)+\": \"+terrain[getArrayIndex(cols, treeCtr, yCtr-h)]);\r\n        return false;\r\n    }\r\n    if (terrain[getArrayIndex(cols, treeCtr - 2, yCtr - h + 2)] != \"sky\") {\r\n        //console.log(\"Space blocked @ \"+(treeCtr-2)+\", \"+(yCtr-h+2)+\": \"+terrain[getArrayIndex(cols, treeCtr-2, yCtr-h+2)]);\r\n        return false;\r\n    }\r\n    if (terrain[getArrayIndex(cols, treeCtr + 2, yCtr - h + 2)] != \"sky\") {\r\n        //console.log(\"Space blocked @ \"+(treeCtr+2)+\", \"+(yCtr-h+2)+\": \"+terrain[getArrayIndex(cols, treeCtr+2, yCtr-h+2)]);\r\n        return false;\r\n    }\r\n    if (spruce) {\r\n        for (var y = 0; y <= h; y++) {\r\n            var idx = getArrayIndex(cols, treeCtr, yCtr - y);\r\n            terrain[idx] = y == 0 ? \"dirt\" : \"log_spruce\";\r\n        }\r\n        var r = 2;\r\n        for (var y = Math.max(2, h - 6); y <= h; y++) {\r\n            //console.log(\"r = \"+r+\" @ y=\"+y);\r\n            for (var i = treeCtr - r; i <= treeCtr + r; i++) {\r\n                var idx = getArrayIndex(cols, i, yCtr - y);\r\n                terrain[idx] = \"leaves_spruce\";\r\n            }\r\n            r += Math.random() <= 0.5 ? 1 : 2;\r\n            if (r > 3)\r\n                r -= 3;\r\n            if (y + 1 == h - 1)\r\n                r = 1;\r\n            if (y + 1 == h)\r\n                r = 0;\r\n        }\r\n    }\r\n    else {\r\n        var birch = Math.random() <= 0.35;\r\n        var leaf = birch ? \"leaves_birch\" : \"leaves\";\r\n        for (var y = 0; y <= h; y++) {\r\n            var idx = getArrayIndex(cols, treeCtr, yCtr - y);\r\n            terrain[idx] = y == 0 ? \"dirt\" : (birch ? \"log_birch\" : \"log\");\r\n        }\r\n        for (var y = h - 3; y <= h; y++) {\r\n            var r = y >= h - 1 ? 1 : 2;\r\n            if (!birch && y == h)\r\n                r = 0;\r\n            for (var i = treeCtr - r; i <= treeCtr + r; i++) {\r\n                var idx = getArrayIndex(cols, i, yCtr - y);\r\n                terrain[idx] = leaf;\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Generating tree at \" + treeCtr + \", \" + yCtr);\r\n    return true;\r\n}\r\nfunction generateBurrowAt(rows, cols, terrain, sky, burrowCtr) {\r\n    var yCtr = sky[burrowCtr];\r\n}\r\nfunction generatePylonAt(rows, cols, terrain, sky, pylonCtr) {\r\n    var yCtr = sky[pylonCtr];\r\n    if (yCtr < 7)\r\n        return false;\r\n    console.log(\"Generating pylon at \" + pylonCtr + \", \" + yCtr);\r\n    for (var i = pylonCtr - 3; i <= pylonCtr + 3; i++) {\r\n        for (var y = yCtr; y <= sky[i]; y++) {\r\n            var idx = getArrayIndex(cols, i, y);\r\n            terrain[idx] = \"crystalstone\";\r\n        }\r\n    }\r\n    for (var i = pylonCtr - 3; i <= pylonCtr + 3; i += 2) {\r\n        var edge = i == pylonCtr - 3 || i == pylonCtr + 3;\r\n        var top = edge ? 5 : 7;\r\n        for (var y = 1; y < top; y++) {\r\n            var idx = getArrayIndex(cols, i, yCtr - y);\r\n            terrain[idx] = \"crystalcol\";\r\n        }\r\n        terrain[getArrayIndex(cols, i, yCtr - top)] = \"rune\";\r\n    }\r\n    terrain[getArrayIndex(cols, pylonCtr - 2, yCtr - 3)] = \"crystalbeam\";\r\n    terrain[getArrayIndex(cols, pylonCtr + 2, yCtr - 3)] = \"crystalbeam\";\r\n    return true;\r\n}\r\nexport default function setPageBackground() {\r\n    if (isPhone)\r\n        return;\r\n    let w = 16 * SCALE;\r\n    let h = 16 * SCALE;\r\n    let x = 0;\r\n    let y = 0;\r\n    //var height = findHighestNode(0, document.documentElement.childNodes);\r\n    let body = document.body;\r\n    let html = document.documentElement;\r\n    var rh = body.scrollHeight; //document.body.offsetHeight;//Math.max(body.offsetHeight, html.clientHeight, html.offsetHeight, window.innerHeight, document.body.clientHeight);\r\n    var rw = Math.max(window.innerWidth, body.scrollWidth); //Math.max(window.innerWidth, document.body.clientWidth);\r\n    //console.log(rw+\" x \"+rh);\r\n    let rows = Math.ceil(rh / h);\r\n    let cols = Math.ceil(rw / w);\r\n    let tw = cols * w;\r\n    let th = rows * h;\r\n    console.log(\"Generating MC chunk slice tileset with \" + cols + \" columns and \" + rows + \" rows from \" + rw + \" x \" + rh);\r\n    let terrain = new Array(cols * rows);\r\n    let skylim = Math.max(0, Math.min(14, Math.ceil(rows * 0.1)));\r\n    let sky = new Array(cols);\r\n    let minSky = Math.floor(skylim / 3);\r\n    let slope = getRandomDecimalBetween(-1, 1);\r\n    let skyH = getRandomDecimalBetween(minSky, skylim);\r\n    //console.log(\"Slope of \"+slope+\" from \"+skyH);\r\n    for (var i = 0; i < cols; i++) {\r\n        sky[i] = Math.floor(skyH);\r\n        //console.log(sky[i]+\" @ \"+i);\r\n        skyH += slope;\r\n        skyH = Math.max(minSky, Math.min(skylim, skyH));\r\n        if (Math.random() < 0.3 || skyH >= skylim - 1 || skyH <= minSky + 1) {\r\n            slope += getRandomDecimalBetween(-0.2, 0.2);\r\n            if (skyH >= skylim - 1)\r\n                slope = Math.min(slope, 0);\r\n            if (skyH <= minSky + 1)\r\n                slope = Math.max(slope, 0);\r\n            slope = Math.max(-1, Math.min(1, slope));\r\n            //console.log(\"Bending slope to \"+slope);\r\n        }\r\n    }\r\n    for (var i = 0; i < cols; i++) {\r\n        for (let k = 0; k < sky[i]; k++) {\r\n            let idx = getArrayIndex(cols, i, k);\r\n            terrain[idx] = \"sky\";\r\n        }\r\n    }\r\n    for (var i = 0; i < cols; i++) {\r\n        for (let k = sky[i]; k < rows; k++) {\r\n            let img = getRandomRawGenBlockAt(i, k - sky[i], rows, sky[i]);\r\n            let idx = getArrayIndex(cols, i, k);\r\n            terrain[idx] = img;\r\n        }\r\n    }\r\n    generateSurface(rows, cols, terrain, sky);\r\n    generateStructures(rows, cols, terrain, skylim);\r\n    generateCaves(rows, cols, terrain);\r\n    genRockVeins(rows, cols, terrain);\r\n    genOreVeins(rows, cols, terrain);\r\n    genGravelDirt(rows, cols, terrain);\r\n    cleanFloatingBlocks(rows, cols, terrain);\r\n    applyLiquids(rows, cols, terrain);\r\n    let tag = \"background-content\";\r\n    let container = document.getElementById(tag);\r\n    if (container == null) {\r\n        container = document.createElement(\"div\");\r\n        container.id = tag;\r\n        console.log(\"Injecting background element.\");\r\n        document.body.prepend(container);\r\n    }\r\n    while (container.firstChild) {\r\n        container.removeChild(container.firstChild);\r\n    }\r\n    //console.log(elem);\r\n    let tiles = document.createElement(\"div\");\r\n    tiles.className = \"tile-layer\";\r\n    container.appendChild(tiles);\r\n    //container.style.width = (rw/2).toString()+\"px\";\r\n    //container.style.height = (rh/2).toString()+\"px\";\r\n    container.style.width = \"100%\";\r\n    container.style.height = \"100%\";\r\n    //container.style.position = \"absolute\";\r\n    buildImage(tiles, rows, cols, terrain);\r\n}\r\n//window.addEventListener('resize', debounce(setPageBackground, 100));\r\n"],"sourceRoot":""}