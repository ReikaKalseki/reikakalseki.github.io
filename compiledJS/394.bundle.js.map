{"version":3,"sources":["webpack://sitecore/./node_modules/simplex-noise/simplex-noise.js","webpack://sitecore/./subnautica/backgroundgen.ts"],"names":["F2","Math","sqrt","G2","G3","F4","G4","SimplexNoise","randomOrSeed","random","s0","s1","s2","c","mash","masher","i","arguments","length","t","alea","this","p","buildPermutationTable","perm","Uint8Array","permMod12","r","aux","n","data","toString","h","charCodeAt","prototype","grad3","Float32Array","grad4","noise2D","xin","yin","i1","j1","n0","n1","n2","s","floor","j","x0","y0","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","t2","gi2","noise3D","zin","n3","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","kk","t3","gi3","noise4D","x","y","z","w","n4","l1","l2","i3","j3","k3","l3","l","w0","rankx","ranky","rankz","rankw","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","exports","module","biomes","createBiome","name","rows","d","ff","minF","varCAmt","varCRate","varFAmt","varFRate","tex","vars","water","ores","plants","height","rowsRequired","floorFraction","minFloorRows","variationCeil","rate","range","variationFloor","depth","baseTerrainTexture","terrainVariants","waterColor","oreSpawnRate","plantSpawnRate","simplex","allocateBiomes","cols","available","rowRem","totalMin","idx","biome","push","index","Array","highest","lowest","fac","slot","amt","baseF","floorVarFromOther","maxs","min","maxr","getSurface","col","topRow","bottomRow","rowsAllocated","airCeiling","airFloor","solidFloor","max","pop","console","log","getBiomeAtRow","row","addPositionedImage","elem","img","modifyImageLocational","added","tile","document","createElement","className","appendChild","addLooseImage","style","position","left","top","transformOrigin","addImageToRow","zIndex","getRandomBiomeTerrain","f","bottom","noise","variant","includes","endsWith","genBlob","tiles","type","exclude","store","rx","ry","mx","my","px","py","ms","slopeX","slopeY","di","dk","dx","dy","backgroundWater","isAir","maxslope","ret","lastY","diff","abs","sign","generateBiomeFloor","minfrac","middle","tileOverlay","addObject","objects","illum","obj","addObjectOfSizeAt","mainTexture","illumTexture","generateTallPlant","rootY","topY","baseTex","topTex","rootTex","arr","generateDoubleWidePlant","middleTex","spr","str","charAt","num","parseInt","substring","isr","indexOf","yy","createTextureWithSuffix","basename","baseillum","suffix","createDualTexture","createFullGlowTexture","getRandomOre","li","getRandomPlant","getRandomSmallFish","getRandomTinyJellyshroom","addCreatureAtRandomizedPosition","creature","f1","f2","lowestY","wT","ceil","hT","getInterpolatedBiomeHeight","elems","flipWithChance","chance","setPageBackground","body","documentElement","rh","offsetHeight","rw","window","innerWidth","clientWidth","tag","container","getElementById","id","prepend","firstChild","removeChild","grid","width","classList","add","baseTexture","caveCeil","caveFloor","ceilAdd","round","floorAdd","gen","groundObjects","generateJellyshroomCave","towers","set","foreground","slots","xx","centerX","baseY","gridSlots","highestY","generateGrassTowers","generateRedGrass","kelpcaves","root","generateCreepvine","caves","func","idxu","generateKelpCaves","generateKoosh","generateReefPods","generateBloodKelp","lrdata","leftShaft","divisions","shaft","boneX","amt1","amt2","riverFloor","lake","dd","boneY","treeX","cl","coveFloor","pillar1","pillar2","pillar3","dPl","dTr","solid","treeY","lsh","lxc","shaftLocation","skullX","skullY","middleLakeXCenter","middleLakeLevel","generateLostRiverCave","cfloor","rsq","generateILZCave","nPlant","nOre","varX","generateGroundDeco","ang","flip","generateSmallCreatures","ns","prY","generateLargeCreatures","waterOverlay","tilerow","waterrow","addTile","addWater","tileTex","flag","buildImage"],"mappings":"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","file":"394.bundle.js","sourcesContent":["/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","const SCALE = 1;\r\nconst biomes = [\r\n    createBiome(\"shallow\", 4, 0, 0.5, 2, 0, 0, 2, 1, \"rock-shallow\", 1, \"water-base\", 0.5, 1),\r\n    createBiome(\"kelp\", 8, 40, 0.25, 0, 2, 2, 3, 2, \"rock-kelp\", 4, \"water-kelp\", 0.5, 0.5),\r\n    createBiome(\"redgrass\", 8, 90, 0.75, 0, 2, 1, 1, 0.5, \"rock-medium\", 2, \"water-redgrass\", 0.75, 2),\r\n    createBiome(\"koosh\", 6, 150, 0.5, 1, 4, 2, 3, 1, \"rock-deep\", 3, \"water-koosh\", 2, 1),\r\n    createBiome(\"jellyshroom\", 8, 200, 0, 0, 2, 1, 4, 1, \"rock-scale\", 1, \"water-jelly\", 1.5, 2),\r\n    createBiome(\"grandreef\", 10, 300, 0.5, 3, 4, 2, 6, 2, \"rock-deep\", 3, \"water-greef\", 1, 1.5),\r\n    createBiome(\"bloodkelp\", 8, 450, 0.75, 1, 4, 2, 1, 1, \"rock-scale\", 1, \"water-bkelp\", 1.5, 1.25),\r\n    createBiome(\"lostriver\", 12, 700, 0, 0, 3, 1, 2, 1, \"rock-lr\", 2, \"water-lr\", 1, 1),\r\n    //mix into lr, using the dead space, createBiome(\"cove\", 10, 900, 0, 0, 1, 1, 3, 1, \"rock-lr\", 2, \"water-cove\", 2, 0.5), //has custom code\r\n    createBiome(\"lava\", 15, 1000, 0, 0, 1, 1, 0, 0, \"lava\", 6, \"water-ilz\", 2, 0.25),\r\n    createBiome(\"void\", 1, 1400, 0, 0, 0, 0, 0, 0, \"void\", 3, \"none\", 0, 0),\r\n];\r\nfunction createBiome(name, rows, d, ff, minF, varCAmt, varCRate, varFAmt, varFRate, tex, vars, water, ores, plants) {\r\n    const h = { rowsRequired: rows, floorFraction: ff, minFloorRows: minF };\r\n    const vc = { rate: varCRate, range: varCAmt };\r\n    const vf = { rate: varFRate, range: varFAmt };\r\n    return { name: name, height: h, variationCeil: vc, variationFloor: vf, depth: d, baseTerrainTexture: tex, terrainVariants: vars, waterColor: water, oreSpawnRate: ores, plantSpawnRate: plants };\r\n}\r\nimport { getRandomBetween, getRandomDecimalBetween, getArrayIndex, fitBCG, isDarkModeEnabled, setRandomRotations, setRotations, mirrorXs } from '../library';\r\nimport { isPhone } from '../browser';\r\nimport * as SimplexNoise from 'simplex-noise';\r\nconst simplex = new SimplexNoise();\r\nfunction allocateBiomes(rows, cols) {\r\n    const available = [];\r\n    let rowRem = rows;\r\n    let totalMin = 0;\r\n    let idx = 0;\r\n    for (const biome of biomes) {\r\n        if (biome.height.rowsRequired <= rowRem) {\r\n            available.push({ biome: biome, index: idx, height: new Array(cols), highest: 9999, lowest: -1 });\r\n            rowRem -= biome.height.rowsRequired;\r\n            totalMin += biome.height.rowsRequired;\r\n            idx++;\r\n        }\r\n        if (rowRem <= 0)\r\n            break;\r\n    }\r\n    //console.log(\"Available biome set is:\");\r\n    //console.log(available);\r\n    //const maxD = available[available.length-1].biome.depth;\r\n    const fac = rows / totalMin;\r\n    for (const slot of available) {\r\n        const amt = Math.floor(fac * slot.biome.height.rowsRequired);\r\n        const ceilPoint = slot.index == 0 ? 0 : available[slot.index - 1].lowest + 1;\r\n        const baseF = ceilPoint + amt;\r\n        const floorVarFromOther = slot.index == available.length - 1 ? { rate: 0, range: 0 } : available[slot.index + 1].biome.variationCeil;\r\n        const maxs = Math.min(3, slot.biome.variationFloor.rate, floorVarFromOther.rate);\r\n        const maxr = Math.min(20, amt * 0.5 * (1 - slot.biome.height.floorFraction), slot.biome.variationFloor.range, floorVarFromOther.range);\r\n        const floor = getSurface(cols, maxs, baseF - maxr, baseF + maxr);\r\n        for (let x = 0; x < cols; x++) {\r\n            const col = { biome: slot, topRow: 0, bottomRow: 0, rowsAllocated: 0, airCeiling: 0, airFloor: 0, solidFloor: 0, x: 0 };\r\n            slot.height[x] = col;\r\n            //const amt = Math.floor(fac*slot.biome.rowsRequired)+offsets[x];\r\n            col.topRow = slot.index == 0 ? 0 : available[slot.index - 1].height[x].bottomRow + 1;\r\n            col.airCeiling = col.topRow;\r\n            col.airFloor = col.bottomRow;\r\n            col.solidFloor = col.bottomRow;\r\n            col.bottomRow = floor[x]; //slot.topRow[x]+slot.rowsAllocated[x]-1;\r\n            col.rowsAllocated = col.bottomRow - col.topRow + 1; //slot.topRow[x]+slot.rowsAllocated[x]-1;\r\n            slot.highest = Math.min(slot.highest, col.topRow);\r\n            slot.lowest = Math.max(slot.lowest, col.bottomRow);\r\n        }\r\n    }\r\n    while (available[available.length - 1].highest >= rows) {\r\n        available.pop();\r\n    }\r\n    available[available.length - 1].lowest = rows - 1;\r\n    for (let x = 0; x < cols; x++) {\r\n        available[available.length - 1].height[x].bottomRow = rows - 1;\r\n    }\r\n    console.log(\"Calculated biome stack is:\");\r\n    console.log(available);\r\n    return available;\r\n}\r\nfunction getBiomeAtRow(row, biomes, x) {\r\n    if (biomes.length == 1 || row < biomes[1].height[x].topRow)\r\n        return biomes[0];\r\n    if (row >= biomes[biomes.length - 1].height[x].topRow)\r\n        return biomes[biomes.length - 1];\r\n    for (const biome of biomes) {\r\n        if (row >= biome.height[x].topRow && row <= biome.height[x].bottomRow)\r\n            return biome;\r\n    }\r\n    console.log(\"No biome available at row=\" + row + \" of \" + biomes + \" @ \" + x);\r\n    return null;\r\n}\r\nfunction addLooseImage(elem, img, w, h) {\r\n    let tile = document.createElement('div'); /*\r\n    if (img == \"air\" || img == \"empty\" || img == null) {\r\n        tile.style.width = w.toString()+\"px\";\r\n        tile.style.height = h.toString()+\"px\";\r\n    }*/\r\n    tile.className = \"tile-subnautica-\" + img;\r\n    elem.appendChild(tile);\r\n    return tile;\r\n}\r\nfunction addPositionedImage(elem, img, x, y, w, h) {\r\n    img = modifyImageLocational(img);\r\n    if (!img || img == \"air\" || img == \"empty\")\r\n        return null;\r\n    let added = addLooseImage(elem, img, w, h);\r\n    added.style.position = \"relative\";\r\n    added.style.left = x.toString() + \"px\";\r\n    added.style.top = y.toString() + \"px\";\r\n    //if (img.startsWith(\"geothermal\"))\r\n    //\tscale *= 2;\r\n    added.style.transformOrigin = \"top left\";\r\n    //added.style.transform = \"scale(\"+scale+\")\";\r\n    //if (img == \"spawner\")\r\n    //\tadded.style.transform = added.style.transform+\" translate(-16px)\";\r\n    return added;\r\n}\r\nfunction addImageToRow(elem, img, z) {\r\n    let tile = document.createElement('div');\r\n    tile.className = \"tile-subnautica-\" + img; /*\r\n    const seek = \"translate(\";\r\n    if (elem.style.transform.includes(seek)) {\r\n        const idx = elem.style.transform.indexOf(seek);\r\n        const args = elem.style.transform.substring(idx+seek.length, elem.style.transform.indexOf(\")\", idx));\r\n        console.log(args);\r\n        img.offsetX -= x;\r\n        img.offsetY -= y;\r\n    }*/ /*\r\n    if (isDarkModeEnabled() && (img.includes(\"water\") || img.includes(\"cave\"))) {\r\n        *tile.style.filter = \"saturate(\"+0.75+\") brightness(\"+0.125+\")\";\r\n    }*/\r\n    tile.style.zIndex = z.toString();\r\n    elem.appendChild(tile);\r\n    return tile;\r\n}\r\n/*\r\nfunction addObjectToRow(elem:HTMLElement, img:placedObject, z:number, lastX:number, lastY:number) {\r\n    let add = addImageToRow(elem, img.texture, img.offsetX, img.offsetY, z, lastX, lastY);\r\n    //overlay\r\n    add = addImageToRow(elem, img.texture, img.offsetX, img.offsetY, z, lastX, lastY);\r\n}\r\n*/\r\nfunction buildImage(grid, waterOverlay, rows, cols, tiles) {\r\n    var w = 64 * SCALE;\r\n    var h = 64 * SCALE;\r\n    var x = 0;\r\n    var y = 0;\r\n    for (var k = 0; k < rows; k++) {\r\n        x = 0;\r\n        let tilerow = document.createElement(\"div\");\r\n        let waterrow = document.createElement(\"div\");\r\n        for (var i = 0; i < cols; i++) {\r\n            let idx = getArrayIndex(cols, rows, i, k);\r\n            const tile = tiles[idx];\r\n            let addTile = tilerow;\r\n            let addWater = waterrow;\r\n            let tileTex = modifyImageLocational(tile.baseTexture);\r\n            if (!tileTex)\r\n                tileTex = \"empty\";\r\n            addTile = addImageToRow(addTile, tileTex, 0);\r\n            if (isDarkModeEnabled()) {\r\n                //add = addImageToRow(add, \"dark\");\r\n                if ((!tile.backgroundWater || tile.backgroundWater == \"empty\") && (!tile.tileOverlay || tile.tileOverlay == \"empty\"))\r\n                    tile.tileOverlay = \"cave\"; //tile.biome.biome.waterColor;\r\n            }\r\n            if (tile.backgroundWater) {\r\n                tile.backgroundWater = modifyImageLocational(tile.backgroundWater);\r\n                if (tile.backgroundWater)\r\n                    addTile = addImageToRow(addTile, tile.backgroundWater, 1);\r\n            }\r\n            let flag = false;\r\n            if (tile.tileOverlay) {\r\n                tile.tileOverlay = modifyImageLocational(tile.tileOverlay);\r\n                if (tile.tileOverlay) {\r\n                    addWater = addImageToRow(addWater, tile.tileOverlay, 4);\r\n                    flag = true;\r\n                }\r\n            }\r\n            if (!flag)\r\n                addWater = addImageToRow(addWater, \"empty\", 4);\r\n            x += w;\r\n        }\r\n        grid.appendChild(tilerow);\r\n        waterOverlay.appendChild(waterrow);\r\n        y += h;\r\n    }\r\n    fitBCG(grid, SCALE);\r\n    fitBCG(waterOverlay, SCALE);\r\n}\r\nfunction getRandomBiomeTerrain(x, y, biome) {\r\n    const f = (y - biome.height[x].topRow) / biome.height[x].rowsAllocated;\r\n    const bottom = y >= biome.height[x].bottomRow + 1 - (1 / SCALE);\r\n    if (biome.biome.name == \"bloodkelp\" && bottom)\r\n        return \"bkelp-floor\";\r\n    let tex = biome.biome.baseTerrainTexture;\r\n    const noise = ((1 + simplex.noise2D(x * 0.1, y * 0.1)) / 2);\r\n    let variant = 1 + Math.floor(noise * biome.biome.terrainVariants);\r\n    if (biome.biome.name == \"lostriver\") {\r\n        if (f < 0.2) {\r\n            tex = \"lr\";\r\n            variant = 4;\r\n        }\r\n        else if (f < 0.3) {\r\n            tex = \"lr\";\r\n            variant = 3;\r\n        }\r\n    }\r\n    else if (biome.biome.name == \"cove\") {\r\n        tex = \"lr\"; /*\r\n        if (bottom) {\r\n            variant = 1+Math.floor(noise*2);\r\n        }\r\n        else */\r\n        if (f < 0.25) {\r\n            variant = 8;\r\n        }\r\n        else if (f < 0.9975) {\r\n            variant = 7;\r\n        }\r\n        else {\r\n            variant = 6;\r\n        }\r\n    }\r\n    return tex + variant;\r\n}\r\nfunction modifyImageLocational(img) {\r\n    if (isDarkModeEnabled()) {\r\n        if (img && (img.includes(\"water-\") || img.includes(\"cave-\") || img.includes(\"brine-\"))) {\r\n            img = \"dark-\" + img;\r\n        }\r\n        else if (img && img.endsWith(\"-glow_toggle\")) {\r\n            img = null;\r\n        }\r\n    }\r\n    return img;\r\n}\r\n/*\r\nfunction addBlock(tiles:gridSlot[], idx:number, img:texture) {\r\n    const tile = tiles[idx];\r\n    if (!tile) {\r\n        console.log(\"Null tile index @ \"+idx+\" / \"+tiles.length+\"!\");\r\n        console.trace();\r\n        return;\r\n    }\r\n    if (!tile.objects) {\r\n        tile.objects = [];\r\n    }\r\n    if (img.mainTexture == \"*remove\")\r\n        tile.objects.pop();\r\n    else\r\n        tile.objects.push({texture:img, offsetX:x ? x : 0, offsetY:y ? y : 0});\r\n}\r\n*/\r\nfunction genBlob(rows, cols, tiles, x, y, type, s, exclude, store) {\r\n    const rx = getRandomDecimalBetween(s[0], s[1]);\r\n    const ry = getRandomDecimalBetween(s[0], s[1]);\r\n    const mx = Math.max(0, Math.floor(x - rx));\r\n    const my = Math.max(0, Math.floor(y - ry));\r\n    const px = Math.min(cols - 1, Math.floor(x + rx));\r\n    const py = Math.min(rows - 1, Math.floor(y + ry));\r\n    const ms = 0.95;\r\n    const slopeX = getRandomDecimalBetween(-ms, ms);\r\n    const slopeY = getRandomDecimalBetween(-ms, ms);\r\n    for (let i = mx; i <= px; i++) {\r\n        for (let k = my; k <= py; k++) {\r\n            const di = i - x;\r\n            const dk = k - y;\r\n            if (di * di + dk * dk <= rx * ry + 0.5) {\r\n                const dx = i + Math.floor(slopeX * dk);\r\n                const dy = k + Math.floor(slopeY * di);\r\n                if (dx < 0 || dy < 0 || dx >= cols || dy >= rows)\r\n                    continue;\r\n                const idx = getArrayIndex(cols, rows, dx, dy);\r\n                if (idx >= 0 && idx < tiles.length && !(exclude && exclude(idx)) && !store.includes(idx)) {\r\n                    tiles[idx].backgroundWater = type;\r\n                    store.push(idx);\r\n                    if (type.includes(\"water\") || type.includes(\"cave\"))\r\n                        tiles[idx].isAir = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getSurface(cols, maxslope, top, bottom) {\r\n    const ret = new Array(cols);\r\n    let lastY = -1;\r\n    for (let x = 0; x < cols; x++) {\r\n        let y = getRandomBetween(top, bottom);\r\n        const diff = y - lastY;\r\n        if (lastY >= 0 && Math.abs(diff) > maxslope)\r\n            y = lastY + Math.sign(diff);\r\n        lastY = y;\r\n        ret[x] = y;\r\n    }\r\n    return ret;\r\n}\r\nfunction generateBiomeFloor(rows, cols, tiles, biome, maxslope, minfrac, minFloorRows) {\r\n    const middle = getSurface(cols, biome.biome.variationFloor.rate, biome.highest + (biome.lowest - biome.highest) * minfrac, biome.lowest - 1 - minFloorRows);\r\n    for (let x = 0; x < cols; x++) {\r\n        const col = biome.height[x];\r\n        //console.log(biome.biome.name+\"floor @ \"+x+\": \"+biome.topRow+\" > \"+bottom[x]+\" [\"+biome.topRow+\"-\"+col.bottomRow+\"]\");\r\n        col.airFloor = Math.min(middle[x], col.bottomRow - 1);\r\n        col.solidFloor = col.airFloor;\r\n        if (biome.index <= 6 && biome.index != 4) { //shallows to bkelp, skip jellyshroom\r\n            for (let y = col.topRow; y <= col.bottomRow; y++) {\r\n                const idx = getArrayIndex(cols, rows, x, y);\r\n                tiles[idx].tileOverlay = biome.biome.waterColor;\r\n                if (y <= col.airFloor) {\r\n                    tiles[idx].backgroundWater = biome.biome.waterColor;\r\n                    tiles[idx].isAir = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction addObject(objects, illum, obj, x, y, dx, dy) {\r\n    return addObjectOfSizeAt(objects, illum, obj, x, y, 64, 64, dx, dy);\r\n}\r\nfunction addObjectOfSizeAt(objects, illum, obj, x, y, w, h, dx, dy) {\r\n    x *= 64; //convert from tile to px\r\n    y *= 64;\r\n    if (dx)\r\n        x += dx;\r\n    if (dy)\r\n        y += dy;\r\n    let ret = [];\r\n    if (obj.mainTexture)\r\n        ret.push(addPositionedImage(objects, obj.mainTexture, x, y, w, h));\r\n    if (obj.illumTexture)\r\n        ret.push(addPositionedImage(illum, obj.illumTexture, x, y, w, h));\r\n    return ret;\r\n}\r\nfunction generateTallPlant(cols, objects, illum, x, rootY, topY, baseTex, topTex, rootTex) {\r\n    const dx = getRandomBetween(-32, 32);\r\n    for (let y = topY; y <= rootY; y++) {\r\n        const top = y == topY;\r\n        const bottom = y == rootY;\r\n        //const idx = getArrayIndex(cols, x, y);\r\n        const arr = top ? topTex : (bottom && rootTex ? rootTex : baseTex);\r\n        const obj = arr[getRandomBetween(0, arr.length - 1)];\r\n        //addBlock(tiles, idx, obj);\r\n        addObject(objects, illum, obj, x, y, dx);\r\n    }\r\n    //console.log(\"Plant @ \"+x+\", \"+rootY+\" > \"+baseTex[0]);\r\n}\r\nfunction generateDoubleWidePlant(cols, objects, illum, x, rootY, topY, baseTex, middleTex, topTex) {\r\n    const dx = getRandomBetween(-16, 16);\r\n    for (let y = rootY; y >= topY; y--) {\r\n        const top = y == topY;\r\n        const bottom = y == rootY;\r\n        const spr = top ? topTex : (bottom || !middleTex ? baseTex : middleTex);\r\n        let str = spr.mainTexture ? spr.mainTexture : spr.illumTexture;\r\n        if (str && str.charAt(str.length - 2) == '*') {\r\n            const num = parseInt(str.charAt(str.length - 1));\r\n            str = str.substring(0, str.length - 2);\r\n            const isr = spr.illumTexture ? spr.illumTexture.substring(0, spr.illumTexture.indexOf('*')) + spr.illumTexture.substring(spr.illumTexture.indexOf('*') + 2) : null;\r\n            //console.log(spr.mainTexture+\"/\"+spr.illumTexture+\" > \"+isr);\r\n            for (let i = 0; i < num; i++) {\r\n                let yy = y - i;\r\n                //const idx1 = getArrayIndex(cols, x, yy);\r\n                //const idx2 = getArrayIndex(cols, x+1, yy);\r\n                //addBlock(tiles, idx1, createTextureWithSuffix(spr, str, (i+1).toString()+\"-left\"));\r\n                //addBlock(tiles, idx2, createTextureWithSuffix(spr, str, (i+1).toString()+\"-right\"));\r\n                addObject(objects, illum, createTextureWithSuffix(spr, str, isr, (i + 1).toString() + \"-left\"), x, yy, dx);\r\n                addObject(objects, illum, createTextureWithSuffix(spr, str, isr, (i + 1).toString() + \"-right\"), x + 1, yy, dx);\r\n            }\r\n            y -= num - 1;\r\n        }\r\n        else {\r\n            //const idx1 = getArrayIndex(cols, x, y);\r\n            //const idx2 = getArrayIndex(cols, x+1, y);\r\n            //addBlock(tiles, idx1, createTextureWithSuffix(spr, str, \"-left\"));\r\n            //addBlock(tiles, idx2, createTextureWithSuffix(spr, str, \"-right\"));\r\n            addObject(objects, illum, createTextureWithSuffix(spr, str, null, \"-left\"), x, y, dx);\r\n            addObject(objects, illum, createTextureWithSuffix(spr, str, null, \"-right\"), x + 1, y, dx);\r\n        }\r\n    }\r\n}\r\nfunction generateCreepvine(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[1];\r\n    for (let x = 0; x < cols; x++) {\r\n        if (getRandomBetween(0, 3) > 0) {\r\n            const col = biome.height[x];\r\n            const n = getRandomBetween(0, 6);\r\n            let root = -1;\r\n            let top = -1;\r\n            switch (n) {\r\n                case 0:\r\n                case 1:\r\n                case 2:\r\n                    root = col.solidFloor;\r\n                    top = Math.max(col.topRow, root - getRandomBetween(4, 8));\r\n                    generateTallPlant(cols, objects, illum, x, root, top, [{ mainTexture: \"creepvine-1\" }, { mainTexture: \"creepvine-2\" }, { mainTexture: \"creepvine-3\" }, { mainTexture: \"creepvine-4\" }, { mainTexture: \"creepvine-5\" }], [{ mainTexture: \"creepvine-top1\" }], null);\r\n                    break;\r\n                case 3:\r\n                case 4:\r\n                case 5:\r\n                    if (x < cols - 1 && Math.abs(biome.height[x].solidFloor - biome.height[x + 1].solidFloor) <= 1) {\r\n                        root = Math.max(biome.height[x].solidFloor, biome.height[x + 1].solidFloor);\r\n                        top = Math.max(col.topRow, root - 3);\r\n                        generateDoubleWidePlant(cols, objects, illum, x, root, top, { mainTexture: \"large-creepvine-bottom*2\" }, n == 5 ? createDualTexture(\"creepvine-seed\") : { mainTexture: \"large-creepvine-center\" }, { mainTexture: \"large-creepvine-top*3\" });\r\n                        x += 1;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction generateReefPods(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[5];\r\n    for (let x = 0; x < cols - 1; x++) {\r\n        if (getRandomBetween(0, 3) > 0) {\r\n            if (Math.abs(biome.height[x].solidFloor - biome.height[x + 1].solidFloor) <= 1) {\r\n                let root = Math.max(biome.height[x].solidFloor, biome.height[x + 1].solidFloor);\r\n                let top = Math.max(biome.height[x].topRow + 2, biome.height[x + 1].topRow + 2, root - getRandomBetween(2, 5));\r\n                //generateTallPlant(cols, tiles, x, root, top, [\"reef-pod-root\"], [\"reef-pod\"]);\r\n                generateDoubleWidePlant(cols, objects, illum, x, root, top, { mainTexture: \"reef-pod-bottom*2\" }, { mainTexture: \"reef-pod-middle\" }, createDualTexture(\"reef-pod-top*2\"));\r\n                x += 2;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction generateBloodKelp(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[6];\r\n    for (let x = 0; x < cols; x++) {\r\n        if (getRandomBetween(0, 1) > 0) {\r\n            let root = biome.height[x].solidFloor;\r\n            let top = Math.max(biome.height[x].topRow, root - getRandomBetween(3, 12));\r\n            generateTallPlant(cols, objects, illum, x, root, top, [{ mainTexture: \"bkelp-middle1\" }, { mainTexture: \"bkelp-middle2\" }, { mainTexture: \"bkelp-middle3\" }], [{ mainTexture: \"bkelp-top1\" }, { mainTexture: \"bkelp-top2\" }], [createDualTexture(\"bkelp-bottom1\"), createDualTexture(\"bkelp-bottom2\")]);\r\n        }\r\n    }\r\n}\r\nfunction generateKoosh(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[3];\r\n    for (let x = 0; x < cols - 1; x++) {\r\n        if (getRandomBetween(0, 4) > 0) {\r\n            if (Math.abs(biome.height[x].solidFloor - biome.height[x + 1].solidFloor) <= 1) {\r\n                let root = Math.max(biome.height[x].solidFloor, biome.height[x + 1].solidFloor);\r\n                generateDoubleWidePlant(cols, objects, illum, x, root, root - 1, createDualTexture(\"koosh-bottom\"), null, createDualTexture(\"koosh-top\"));\r\n                tiles[getArrayIndex(cols, rows, x, root)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, root)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x, root - 1)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, root - 1)].groundObjects = 2;\r\n                x += 2;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction createTextureWithSuffix(tex, basename, baseillum, suffix) {\r\n    const start = basename ? basename : tex.mainTexture;\r\n    let illum = tex.illumTexture ? (baseillum ? baseillum : tex.illumTexture) + suffix : null;\r\n    let ret = { mainTexture: start + suffix, illumTexture: illum };\r\n    return ret;\r\n}\r\nfunction createDualTexture(tex) {\r\n    let ret = { mainTexture: tex, illumTexture: tex + \"-glow\" };\r\n    return ret;\r\n}\r\nfunction createFullGlowTexture(tex) {\r\n    let ret = { mainTexture: null, illumTexture: tex };\r\n    return ret;\r\n}\r\nfunction generateGroundDeco(rows, cols, tiles, biomes, lrdata, objects, illum) {\r\n    for (const biome of biomes) {\r\n        const nPlant = 12 * biome.biome.plantSpawnRate;\r\n        const nOre = 6 * biome.biome.oreSpawnRate;\r\n        for (let i = 0; i < nPlant; i++) {\r\n            const gen = getRandomPlant(biome);\r\n            if (gen) {\r\n                let x = getRandomBetween(0, cols - 1);\r\n                if (lrdata && biome.index == 7 && Math.abs(x - lrdata.shaftLocation) <= 2)\r\n                    continue;\r\n                let y = Math.min(biome.height[x].solidFloor, rows - 1);\r\n                const idx = getArrayIndex(cols, rows, x, y);\r\n                if (tiles[idx].groundObjects >= 1)\r\n                    continue;\r\n                if (gen.mainTexture == \"wigglegrass\" || gen.mainTexture == \"acidmushroom\" || gen.mainTexture == \"whitemushroom\") {\r\n                    const n = getRandomBetween(2, 5);\r\n                    for (let k = 0; k < n; k++)\r\n                        addObject(objects, illum, gen, x, y, getRandomBetween(-60, 60));\r\n                }\r\n                else {\r\n                    const varX = gen.mainTexture != \"membrain\" && gen.illumTexture != \"alkaliplant\" ? 48 : 24;\r\n                    //addBlock(tiles, idx, gen, getRandomBetween(-varX, varX), getRandomBetween(2, 12));\r\n                    addObject(objects, illum, gen, x, y, getRandomBetween(-varX, varX));\r\n                }\r\n                tiles[idx].groundObjects++;\r\n            }\r\n        }\r\n        for (let i = 0; i < nOre; i++) {\r\n            const gen = getRandomOre(biome);\r\n            if (gen) {\r\n                let x = getRandomBetween(0, cols - 1);\r\n                if (lrdata && biome.index == 7 && Math.abs(x - lrdata.shaftLocation) <= 2)\r\n                    continue;\r\n                let y = Math.min(biome.height[x].solidFloor, rows - 1);\r\n                const idx = getArrayIndex(cols, rows, x, y);\r\n                if (tiles[idx].groundObjects >= 1)\r\n                    continue;\r\n                const varX = gen.illumTexture == \"abysso\" || gen.mainTexture == \"azurite\" ? 48 : 24;\r\n                //addBlock(tiles, idx, gen, getRandomBetween(-varX, varX), getRandomBetween(2, 12));\r\n                addObject(objects, illum, gen, x, y, getRandomBetween(-varX, varX));\r\n                tiles[idx].groundObjects++;\r\n            }\r\n        }\r\n    }\r\n    if (biomes.length <= 7 || !lrdata)\r\n        return;\r\n    for (let x = 0; x < cols; x++) {\r\n        if (lrdata.coveFloor[x] >= 0 && getRandomBetween(0, 3) == 0 && Math.abs(lrdata.treeX - x) > 1) {\r\n            const gen = getRandomOre(biomes[7]);\r\n            if (gen) {\r\n                const y = lrdata.coveFloor[x];\r\n                const idx = getArrayIndex(cols, rows, x, y);\r\n                if (tiles[idx].groundObjects >= 1)\r\n                    continue;\r\n                const varX = gen.illumTexture == \"abysso\" || gen.mainTexture == \"azurite\" ? 48 : 24;\r\n                addObject(objects, illum, gen, x, y, getRandomBetween(-varX, varX));\r\n                tiles[idx].groundObjects++;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getRandomOre(biome) {\r\n    let li = [{ mainTexture: \"quartz\" }];\r\n    if (biome.index >= 3 && biome.index <= 7) {\r\n        li.push({ mainTexture: \"lithium\" });\r\n    }\r\n    if (biome.index >= 3 && biome.index != 4 && biome.index <= 6) {\r\n        li.push(createDualTexture(\"azurite\"));\r\n    }\r\n    if (biome.index >= 4 && biome.index <= 7) {\r\n        li.push({ mainTexture: \"magnetite\" });\r\n    }\r\n    if (biome.index >= 5 && biome.index <= 7) {\r\n        li.push(createDualTexture(\"ruby\"));\r\n    }\r\n    if (biome.index >= 6 && biome.index <= 7) {\r\n        li.push(createDualTexture(\"uranium\"));\r\n    }\r\n    if (biome.index == 6) {\r\n        li.push(createFullGlowTexture(\"abysso\"));\r\n    }\r\n    if (biome.index == 7) {\r\n        li.push({ mainTexture: \"sulfur\" });\r\n    }\r\n    if (biome.index >= 7) {\r\n        li.push({ mainTexture: \"nickel\" });\r\n    }\r\n    if (biome.index >= 8) {\r\n        li.push(createFullGlowTexture(\"kyanite\"));\r\n    }\r\n    return li.length == 0 ? null : li[getRandomBetween(0, li.length - 1)];\r\n}\r\nfunction getRandomPlant(biome) {\r\n    let li = [];\r\n    if (biome.index == 0) {\r\n        li.push(createDualTexture(\"wigglegrass\"));\r\n        li.push(createDualTexture(\"acidmushroom\"));\r\n    }\r\n    if (biome.index >= 2 && biome.index <= 3) {\r\n        li.push({ mainTexture: \"redwort\" });\r\n    }\r\n    if (biome.index >= 3 && biome.index <= 5 && biome.index != 4) {\r\n        li.push(createFullGlowTexture(\"alkaliplant\"));\r\n    }\r\n    if ((biome.index >= 4 && biome.index <= 5) || biome.index == 2) {\r\n        li.push(createFullGlowTexture(\"violetbeau\"));\r\n    }\r\n    if (biome.index >= 5 && biome.index <= 7) {\r\n        li.push(createDualTexture(\"gabefeather\"));\r\n    }\r\n    if (biome.index == 5) { //grand reef only\r\n        li.push(createDualTexture(\"membrain\"));\r\n    }\r\n    if (biome.index >= 6) {\r\n        li.push({ mainTexture: \"whitemushroom\" });\r\n    }\r\n    if (biome.index == 7) { //lost river only\r\n        li.push(createDualTexture(\"ghostweed\"));\r\n        li.push(createDualTexture(\"crabkelp\"));\r\n    }\r\n    return li.length == 0 ? null : li[getRandomBetween(0, li.length - 1)];\r\n}\r\nfunction getRandomSmallFish(biome) {\r\n    let li = [];\r\n    if (biome.index <= 5 && biome.index != 4) { //grand reef and above except jellyshroom\r\n        li.push(createDualTexture(\"peeper\"));\r\n        li.push({ mainTexture: \"bladderfish\" });\r\n    }\r\n    if (biome.index == 0) {\r\n        li.push(createDualTexture(\"rabbitray\"));\r\n    }\r\n    if (biome.index == 0 || biome.index == 3) {\r\n        li.push(createDualTexture(\"boomerang\"));\r\n    }\r\n    if (biome.index == 3 || biome.index == 7) { //koosh, lr\r\n        li.push(createDualTexture(\"mesmer1\"));\r\n        li.push(createDualTexture(\"mesmer2\"));\r\n    }\r\n    if (biome.index == 1) {\r\n        li.push(createDualTexture(\"hoopfish\"));\r\n    }\r\n    if (biome.index == 2 || biome.index == 4) {\r\n        li.push(createDualTexture(\"biter\"));\r\n    }\r\n    if (biome.index == 2 || biome.index == 6 || biome.index == 7) { //red grass, blood kelp, lr\r\n        li.push(createDualTexture(\"reginald\"));\r\n    }\r\n    if (biome.index == 4) {\r\n        li.push(createDualTexture(\"oculus\"));\r\n    }\r\n    if (biome.index == 4 || biome.index == 5) {\r\n        li.push({ mainTexture: \"eyeye\" });\r\n    }\r\n    if (biome.index == 6) { //bkelp\r\n        li.push(createDualTexture(\"blighter\"));\r\n    }\r\n    if (biome.index == 6 || biome.index == 7) { //bkelp, lr\r\n        li.push(createDualTexture(\"spinefish\"));\r\n    }\r\n    if (biome.index >= 8) { //ilz\r\n        li.push(createDualTexture(\"magmarang\"));\r\n    }\r\n    return li.length == 0 ? null : li[getRandomBetween(0, li.length - 1)];\r\n}\r\nfunction generateRedGrass(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[2];\r\n    for (let x = 0; x < cols; x++) {\r\n        if (getRandomBetween(0, 5) > 0) {\r\n            let y = Math.ceil(biome.height[x].airFloor);\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            if (tiles[idx].isAir)\r\n                addObject(objects, illum, { mainTexture: \"red-grass\" }, x, y);\r\n        }\r\n    }\r\n}\r\nfunction generateGrassTowers(rows, cols, tiles, biomes) {\r\n    let biome = biomes[2];\r\n    let set = [];\r\n    let max = 999;\r\n    for (let x = getRandomBetween(3, 5); x < cols - 4; x++) {\r\n        let y0 = biome.height[x].airFloor;\r\n        let y = Math.max(biome.height[x].topRow + 2, Math.ceil((biome.height[x].topRow + biome.height[x].bottomRow) / 2), y0 - Math.ceil(getRandomDecimalBetween(Math.max(biome.height[x].rowsAllocated * 0.25, 3), Math.max(Math.ceil(biome.height[x].rowsAllocated * 0.67), 7))));\r\n        if (y0 - y >= 2) {\r\n            const foreground = getRandomBetween(0, 2) == 0;\r\n            let slots = [];\r\n            max = Math.min(max, y);\r\n            for (let yy = y; yy <= y0; yy++) {\r\n                const w = yy == y ? 1 : Math.min(1, getRandomBetween(0, 2));\r\n                for (let xx = x - w; xx <= x + w; xx++) {\r\n                    const idx = getArrayIndex(cols, rows, xx, yy);\r\n                    tiles[idx].tileOverlay = null;\r\n                    if (foreground)\r\n                        tiles[idx].backgroundWater = null;\r\n                    biome.height[xx].airFloor = Math.min(biome.height[xx].airFloor, yy - 1);\r\n                    if (foreground)\r\n                        biome.height[xx].solidFloor = Math.min(biome.height[xx].solidFloor, yy - 1);\r\n                    tiles[idx].isAir = false;\r\n                    slots.push(idx);\r\n                }\r\n            }\r\n            set.push({ centerX: x, baseY: y0, top: y, gridSlots: slots, foreground: false });\r\n            x += getRandomBetween(5, 9);\r\n        }\r\n    }\r\n    return { towers: set, highestY: max };\r\n}\r\nfunction generateKelpCaves(rows, cols, tiles, biomes, objects, illum, towers) {\r\n    let biome = biomes[1];\r\n    let caves = [];\r\n    const func = towers ? function (idx) {\r\n        for (let data of towers.towers) {\r\n            if (data.gridSlots.includes(idx))\r\n                return true;\r\n        }\r\n        return false;\r\n    } : null;\r\n    for (let i = 0; i < 5; i++) {\r\n        let x = getRandomBetween(2, cols - 3);\r\n        let y = getRandomBetween(biome.highest + 6, biome.lowest);\r\n        //const idx = getArrayIndex(cols, x, y);\r\n        //addBlock(blocks, idx, \"bkelp\");\r\n        genBlob(rows, cols, tiles, x, y, \"cave\", [3, 5], func, caves);\r\n    }\r\n    for (let i = 0; i < 125; i++) {\r\n        const idx = caves[getRandomBetween(0, caves.length - 1)];\r\n        const tile = tiles[idx];\r\n        if (tile.y < biome.height[tile.x].topRow)\r\n            continue;\r\n        const idxu = getArrayIndex(cols, rows, tile.x, tile.y - 1);\r\n        if (!caves.includes(idxu)) {\r\n            const n2 = getRandomBetween(1, 3);\r\n            for (let n = 0; n < n2; n++)\r\n                addObject(objects, illum, createFullGlowTexture(\"stinger\"), tile.x, tile.y, getRandomBetween(-48, 48));\r\n        }\r\n    }\r\n    return caves;\r\n}\r\nfunction generateJellyshroomCave(rows, cols, tiles, biomes, objects, illum) {\r\n    let biome = biomes[4];\r\n    const caveCeil = getSurface(cols, 1.5, 0, Math.min(3, (biome.lowest - biome.highest) * 0.25));\r\n    const caveFloor = getSurface(cols, 0.5, 0, Math.min(8, (biome.lowest - biome.highest) * 0.33));\r\n    const ceilAdd = Math.round(Math.min((biome.lowest - biome.highest) * 0.25, 5));\r\n    const floorAdd = Math.round(Math.min((biome.lowest - biome.highest) * 0.25, 3));\r\n    for (let x = 0; x < cols; x++) {\r\n        const col = biome.height[x];\r\n        const y1 = col.topRow + ceilAdd + caveCeil[x];\r\n        const y2 = col.bottomRow - floorAdd - caveFloor[x];\r\n        col.airCeiling = Math.floor(y1);\r\n        col.airFloor = Math.floor(y2);\r\n        col.solidFloor = Math.floor(y2);\r\n        //console.log(\"Jellyshroom @ \"+x+\": \"+y1+\" > \"+y2);\r\n        for (let y = y1; y <= y2; y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            if (tiles[idx].biome == biome) {\r\n                tiles[idx].backgroundWater = \"jellycave-light\"; //\"jellycave\";\r\n                tiles[idx].isAir = true;\r\n            }\r\n        } /*\r\n        for (let y = y1-2; y < y1; y++) {\r\n            const idx = getArrayIndex(cols, x, y);\r\n            tiles[idx].backgroundWater = \"jellycave-light\";\r\n        }\r\n        for (let y = y2+1; y <= y2+3; y++) {\r\n            const idx = getArrayIndex(cols, x, y);\r\n            tiles[idx].backgroundWater = \"jellycave-light\";\r\n        }*/\r\n        for (let y = y1 - 2; y <= Math.min(y2 + 3, rows - 1); y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            tiles[idx].tileOverlay = \"jellycave-light\";\r\n        }\r\n    }\r\n    for (let x = 0; x < cols - 1; x++) {\r\n        const gen = getRandomTinyJellyshroom();\r\n        if (gen) {\r\n            let y = Math.min(biome.height[x].solidFloor, rows - 1);\r\n            addObject(objects, illum, gen, x, y, 0);\r\n        }\r\n    }\r\n    for (let x = 0; x < cols - 1; x++) {\r\n        if (getRandomBetween(0, 2) == 0) {\r\n            if (Math.abs(biome.height[x].airFloor - biome.height[x + 1].airFloor) <= 1) {\r\n                let y = Math.max(biome.height[x].airFloor, biome.height[x + 1].airFloor);\r\n                if (getRandomBetween(0, 2) == 0)\r\n                    generateDoubleWidePlant(cols, objects, illum, x, y, y - 1, createDualTexture(\"jellyshroom-bottom\"), null, createFullGlowTexture(\"jellyshroom-top\"));\r\n                else\r\n                    generateDoubleWidePlant(cols, objects, illum, x, y, y - 1, createDualTexture(\"jellyshroom2-bottom\"), null, createFullGlowTexture(\"jellyshroom2-top\"));\r\n                tiles[getArrayIndex(cols, rows, x, y)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, y)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x, y - 1)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, y - 1)].groundObjects = 2;\r\n                x += 2;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getRandomTinyJellyshroom() {\r\n    let idx = getRandomBetween(0, 4);\r\n    return idx > 0 ? createFullGlowTexture(\"tinyjelly\" + idx) : null;\r\n}\r\nfunction generateLostRiverCave(rows, cols, tiles, biomes, objects, illum) {\r\n    const leftShaft = Math.random() < 0.5;\r\n    const divisions = [getRandomBetween(7, cols / 2), getRandomBetween(cols / 2, cols - 7)];\r\n    let shaft = leftShaft ? 5 : cols - 6;\r\n    let boneX = Math.round((leftShaft ? (divisions[1] + cols) / 2 : divisions[0] / 2) - 2); //cols-shaft;\r\n    //console.log(\"Shaft @ \"+shaft);\r\n    let biome = biomes[7];\r\n    const caveCeil = getSurface(cols, 0.5, 0, Math.min(2, (biome.lowest - biome.highest) * 0.25));\r\n    //const lake = getSurface(cols, 0.25, 0, Math.min(8, (biome.lowest-biome.highest)*0.33));\r\n    const bottom = getSurface(cols, 0.5, 0, Math.min(4, (biome.lowest - biome.highest) * 0.33));\r\n    const ceilAdd = Math.min((biome.lowest - biome.highest) * 0.25, 3);\r\n    const floorAdd = Math.min((biome.lowest - biome.highest) * 0.25, 5);\r\n    const amt1 = getRandomBetween(2, 5);\r\n    const amt2 = getRandomBetween(2, 5);\r\n    const riverFloor = new Array(cols);\r\n    for (let x = 0; x < cols; x++) {\r\n        const col = biome.height[x];\r\n        let y1 = col.topRow + ceilAdd + caveCeil[x];\r\n        if (Math.abs(x - boneX) <= 2)\r\n            bottom[x] = 0;\r\n        let y2 = col.bottomRow - floorAdd - bottom[x];\r\n        let lake = biome.highest + (biome.lowest - biome.highest) * 0.6;\r\n        const dd = Math.abs(shaft - x);\r\n        if (dd <= 2) {\r\n            y2 = col.bottomRow;\r\n            if (dd <= 1)\r\n                lake = col.bottomRow + 1;\r\n        }\r\n        else if (dd <= 5) {\r\n            y2 += 9 - dd;\r\n            //lake += (9-dd)*0.5;\r\n        }\r\n        if (leftShaft) {\r\n            if (x >= divisions[0]) {\r\n                y2 -= amt1;\r\n                lake -= x > divisions[0] ? amt1 : amt1 / 2;\r\n            }\r\n            if (x >= divisions[1]) {\r\n                y2 -= amt2;\r\n                lake -= x > divisions[1] ? amt2 : amt2 / 2;\r\n            }\r\n        }\r\n        else {\r\n            if (x <= divisions[1]) {\r\n                y2 -= amt1;\r\n                lake -= x < divisions[1] ? amt1 : amt1 / 2;\r\n            }\r\n            if (x <= divisions[0]) {\r\n                y2 -= amt2;\r\n                lake -= x < divisions[0] ? amt2 : amt2 / 2;\r\n            }\r\n        }\r\n        if (y2 > col.bottomRow)\r\n            y2 = col.bottomRow;\r\n        //console.log(\"Jellyshroom @ \"+x+\": \"+y1+\" > \"+y2);\r\n        col.airCeiling = Math.floor(y1);\r\n        col.airFloor = Math.floor(lake - 1);\r\n        col.solidFloor = Math.floor(y2);\r\n        riverFloor[x] = Math.floor(lake) + 3;\r\n        for (let y = y1; y <= y2; y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            tiles[idx].backgroundWater = biome.biome.waterColor;\r\n            if (y >= lake)\r\n                tiles[idx].tileOverlay = \"brine\";\r\n            else\r\n                tiles[idx].tileOverlay = biome.biome.waterColor + \"-light\";\r\n            if (Math.abs(y - lake) <= 1 && dd > 2)\r\n                tiles[idx].baseTexture = Math.random() < 0.5 ? \"lr2\" : \"lr1\"; /*\r\n        for (let y = y1-2; y < y1; y++) {\r\n            const idx = getArrayIndex(cols, x, y);\r\n            tiles[idx].backgroundWater = biome.biome.waterColor+\"-light\";\r\n        }\r\n        for (let y = y2+1; y <= y2+3; y++) {\r\n            const idx = getArrayIndex(cols, x, y);\r\n            tiles[idx].backgroundWater = biome.biome.waterColor+\"-light\";\r\n        }*/\r\n        }\r\n    } /*\r\n    let x = shaft-2;\r\n    for (let y = y1; y <= y2; y++) {\r\n\r\n    }*/\r\n    let boneY = riverFloor[boneX] - 4;\r\n    addObjectOfSizeAt(objects, illum, createDualTexture(\"lrskull\"), boneX, boneY + 0.4, 320, 192);\r\n    //cove\r\n    let treeX = cols - shaft;\r\n    const cl = biome.lowest - 5;\r\n    const coveFloor = new Array(cols);\r\n    let pillar1 = getRandomBetween(0, cols);\r\n    let pillar2 = getRandomBetween(0, cols);\r\n    let pillar3 = getRandomBetween(0, cols);\r\n    for (let x = 0; x < cols; x++) {\r\n        if ((leftShaft && x < shaft) || (!leftShaft && x > shaft)) {\r\n            coveFloor[x] = -1;\r\n            continue;\r\n        }\r\n        const dPl = Math.min(Math.abs(x - pillar1), Math.abs(x - pillar2), Math.abs(x - pillar3));\r\n        const dTr = Math.abs(x - treeX);\r\n        const col = biome.height[x];\r\n        let y1 = Math.max(riverFloor[x], col.solidFloor) + (dTr < 5 ? 2 : 3);\r\n        let y2 = biome.lowest - 3;\r\n        const solid = dTr <= 2 || dPl == 0;\r\n        coveFloor[x] = solid ? cl - 1 : (dPl == 1 ? y2 - 1 : y2);\r\n        for (let y = y1; y <= y2; y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            tiles[idx].tileOverlay = \"water-cove\";\r\n            if (y >= cl - getRandomBetween(1, 2))\r\n                tiles[idx].baseTexture = \"lr6\";\r\n            else if (y >= y1 * 0.7 + cl * 0.3)\r\n                tiles[idx].baseTexture = \"lr7\";\r\n            else\r\n                tiles[idx].baseTexture = \"lr8\";\r\n            if (y >= cl) {\r\n                if (solid || ((dTr == 3 || dPl == 1) && y == y2)) {\r\n                    tiles[idx].tileOverlay = null;\r\n                }\r\n                else {\r\n                    tiles[idx].tileOverlay = \"brine-cove\";\r\n                    tiles[idx].baseTexture = \"lr6\";\r\n                }\r\n            }\r\n            if (y >= cl) {\r\n                tiles[idx].baseTexture = y == cl ? (Math.random() < 0.5 ? \"lr2\" : \"lr1\") : \"rock-deep1\";\r\n            }\r\n        }\r\n    }\r\n    let treeY = coveFloor[treeX] - 1;\r\n    const lsh = getRandomBetween(0, 1) == 0;\r\n    addObjectOfSizeAt(objects, illum, createDualTexture(\"cove-tree\"), lsh ? treeX - 1 : treeX - 2, treeY - 1.33, 256, 256);\r\n    /*\r\n    const coveCeil = getSurface(cols, 0.5, 0, Math.min(5, (biome.lowest-biome.highest)*0.33));\r\n    const coveFloor = getSurface(cols, 0.5, 0, Math.min(3, (biome.lowest-biome.highest)*0.25));\r\n    const ceilAddCove = Math.min((biome.lowest-biome.highest)*0.25, 2);\r\n    const floorAddCove = Math.min((biome.lowest-biome.highest)*0.25, 1);\r\n    for (let x = 0; x < cols; x++) {\r\n        const col = biome.height[x];\r\n        let y1 = col.topRow+ceilAddCove+coveCeil[x];\r\n        let y2 = col.bottomRow-floorAddCove-coveFloor[x];\r\n        let yw = biome.highest+(biome.lowest-biome.highest)*0.667;\r\n        let d = 3;\r\n        //console.log(\"Jellyshroom @ \"+x+\": \"+y1+\" > \"+y2);\r\n        if (leftShaft) {\r\n            y1 += Math.max(0, x-4)*0.25;\r\n            y2 += Math.max(0, x-4)*0.75;\r\n            yw += Math.max(0, x-4)*0.125;\r\n            d -= Math.max(0, x-4)*0.125;\r\n        }\r\n        else {\r\n            y1 += Math.max(0, cols-x-4)*0.25;\r\n            y2 += Math.max(0, cols-x-4)*0.75;\r\n            yw += Math.max(0, cols-x-4)*0.125;\r\n            d -= Math.max(0, cols-x-4)*0.125;\r\n        }\r\n        y1 = Math.floor(y1);\r\n        y2 = Math.floor(y2);\r\n        if (y2 > col.bottomRow-d)\r\n            y2 = col.bottomRow-d;\r\n        col.airCeiling = Math.floor(y1);\r\n        col.airFloor = Math.floor(yw);\r\n        col.solidFloor = Math.floor(y2);\r\n        const edgeThresh = getRandomDecimalBetween(1.0, 2.5);\r\n        const edgeThresh2 = getRandomDecimalBetween(-1, 1);\r\n        for (let y = y1; y <= y2; y++) {\r\n            const idx = getArrayIndex(cols, x, y);\r\n            if (tiles[idx] == null) {\r\n                console.log(\"null tile @ \"+x+\", \"+y);\r\n                continue;\r\n            }\r\n            if (tiles[idx].biome == biome) {\r\n                if (y >= yw-5)\r\n                    tiles[idx].baseTexture = y >= yw-edgeThresh ? (Math.random() < 0.5 ? \"lr2\" : \"lr1\") : \"lr6\";\r\n                //tiles[idx].backgroundWater = biome.biome.waterColor;\r\n                if (y >= yw) {\r\n                    tiles[idx].tileOverlay = biome.biome.waterColor;\r\n                    if (y >= yw+edgeThresh2)\r\n                        tiles[idx].baseTexture = \"rock-lr1\";\r\n                }\r\n                else {\r\n                    tiles[idx].isAir = true;\r\n                    tiles[idx].tileOverlay = \"brine-blue\";\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n    const lxc = Math.floor((divisions[0] + divisions[1]) / 2);\r\n    let ret = { shaftLocation: shaft, coveFloor: coveFloor, treeX: treeX, treeY: treeY, skullX: boneX, skullY: boneY, middleLakeXCenter: lxc, middleLakeLevel: riverFloor[lxc] - 3 };\r\n    return ret;\r\n}\r\nfunction generateILZCave(rows, cols, tiles, biomes, shaft, objects, illum) {\r\n    let biome = biomes[8];\r\n    const caves = [];\r\n    const cfloor = [];\r\n    const floor = getSurface(cols, 2, 0, 3);\r\n    for (let x = 0; x < cols; x++) {\r\n        const col = biome.height[x];\r\n        const dy = getRandomBetween(0, 3);\r\n        cfloor[x] = Math.min(rows - 1, col.bottomRow - 3) + floor[x] - 3;\r\n        col.solidFloor = Math.floor(cfloor[x]);\r\n        col.airCeiling = col.topRow + 2;\r\n        for (let y0 = col.airCeiling; y0 <= cfloor[x]; y0++) {\r\n            const idx = getArrayIndex(cols, rows, x, y0);\r\n            tiles[idx].tileOverlay = biome.biome.waterColor;\r\n            let y = y0;\r\n            if ((x - cols / 2) < 7) {\r\n                y += dy;\r\n            }\r\n            const rsq = (x - cols / 2) * (x - cols / 2) + (y - cfloor[x]) * (y - cfloor[x]) * 1.25;\r\n            //console.log(x+\", \"+y+\" / \"+(cols/2)+\", \"+cfloor+\" > \"+rsq);\r\n            if (rsq <= 256 && rsq >= 81) {\r\n                caves.push(idx);\r\n                tiles[idx].backgroundWater = biome.biome.waterColor;\r\n                tiles[idx].isAir = true;\r\n            }\r\n            else {\r\n                col.solidFloor = Math.max(col.solidFloor, y0 - 1);\r\n            }\r\n        }\r\n    }\r\n    const left = shaft < 6;\r\n    const x2 = left ? cols - 6 : 5;\r\n    for (let x = x2 - 2; x <= x2 + 2; x++) {\r\n        const col = biome.height[x];\r\n        const cfloor = Math.min(rows - 1, col.bottomRow - 3);\r\n        for (let y = col.topRow; y <= cfloor; y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            if (!caves.includes(idx)) {\r\n                caves.push(idx);\r\n                tiles[idx].backgroundWater = biome.biome.waterColor;\r\n                tiles[idx].isAir = true;\r\n            }\r\n        }\r\n    }\r\n    for (let x = shaft - 2; x <= shaft + 2; x++) {\r\n        const col = biome.height[x];\r\n        for (let y = col.topRow; y <= cfloor[x]; y++) {\r\n            const idx = getArrayIndex(cols, rows, x, y);\r\n            let tex = Math.abs(x - shaft) < 2 ? biome.biome.waterColor : \"magma\";\r\n            if (tex == \"magma\" || !caves.includes(idx)) {\r\n                caves.push(idx);\r\n                tiles[idx].tileOverlay = tex;\r\n                tiles[idx].isAir = true;\r\n            }\r\n        }\r\n    }\r\n    for (let x = 0; x < cols; x++) {\r\n        if (floor[x] == 3) {\r\n            const idx = getArrayIndex(cols, rows, x, cfloor[x]);\r\n            tiles[idx].tileOverlay = \"magma\";\r\n            biome.height[x].solidFloor--;\r\n        }\r\n    }\r\n    //addBlock(tiles, idx, biome.biome.waterColor);\r\n    //addBlock(tiles, idx, \"magma\");\r\n    for (let x = 0; x < cols - 1; x++) {\r\n        if (getRandomBetween(0, 2) == 0) {\r\n            if (Math.abs(biome.height[x].solidFloor - biome.height[x + 1].solidFloor) <= 1) {\r\n                let y = Math.min(rows - 1, Math.round(Math.max(biome.height[x].solidFloor, biome.height[x + 1].solidFloor)));\r\n                if (getRandomBetween(0, 2) == 0)\r\n                    generateDoubleWidePlant(cols, objects, illum, x, y, y - 1, createDualTexture(\"lavashroom-bottom\"), null, createFullGlowTexture(\"lavashroom-top\"));\r\n                else\r\n                    generateDoubleWidePlant(cols, objects, illum, x, y, y - 1, createDualTexture(\"lavashroom2-bottom\"), null, createFullGlowTexture(\"lavashroom2-top\"));\r\n                tiles[getArrayIndex(cols, rows, x, y)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, y)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x, y - 1)].groundObjects = 2;\r\n                tiles[getArrayIndex(cols, rows, x + 1, y - 1)].groundObjects = 2;\r\n                x += 2;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getInterpolatedBiomeHeight(biome, f1, f2) {\r\n    const f = f2 ? getRandomDecimalBetween(f1, f2) : f1;\r\n    let ret = Math.floor(biome.highest + (biome.lowest - biome.highest) * f);\r\n    if (ret < biome.highest)\r\n        return biome.highest;\r\n    if (ret > biome.lowest)\r\n        return biome.lowest;\r\n    return ret;\r\n}\r\nfunction addCreatureAtRandomizedPosition(cols, objects, illum, creature, biome, w, h, f1, f2, lowestY) {\r\n    const wT = Math.ceil(w / 64);\r\n    const hT = Math.ceil(h / 64);\r\n    const x = getRandomBetween(wT, cols - wT);\r\n    let y = f1 ? getInterpolatedBiomeHeight(biome, f1, f2) : getRandomBetween(biome.highest, biome.lowest);\r\n    for (let dx = Math.max(0, x - wT); dx <= Math.min(x + wT, cols - 1); dx++) {\r\n        y = Math.max(biome.height[dx].airCeiling + 1, Math.min(biome.height[dx].solidFloor - hT - 1, y));\r\n    }\r\n    if (lowestY)\r\n        y = Math.min(lowestY, y);\r\n    let elems = addObjectOfSizeAt(objects, illum, creature, x, y, w, h);\r\n    setRandomRotations(elems, 5);\r\n    flipWithChance(elems, 0.5);\r\n}\r\nexport function flipWithChance(elems, chance) {\r\n    if (Math.random() < chance)\r\n        mirrorXs(elems);\r\n}\r\nfunction generateLargeCreatures(rows, cols, tiles, biomes, objects, illum, towers, lrdata) {\r\n    if (biomes.length > 1) { //kelp\r\n        for (let i = 0; i < 3; i++)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, { mainTexture: \"stalker\" }, biomes[1], 256, 96);\r\n    }\r\n    if (biomes.length > 2 && towers && towers.highestY - biomes[2].highest > 3) { //red grass\r\n        if (Math.random() <= 0.67)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"reefback1\"), biomes[2], 768, 256, 0.125, 0.5, towers ? towers.highestY - 4 : null);\r\n        if (Math.random() <= 0.67)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"reefback2\"), biomes[2], 768, 256, 0.125, 0.5, towers ? towers.highestY - 4 : null);\r\n    }\r\n    if (biomes.length > 3) { //koosh\r\n        if (Math.random() <= 0.67)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"ampeel\"), biomes[3], 256, 128);\r\n        const ns = getRandomBetween(0, 3);\r\n        for (let i = 0; i < ns; i++)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"boneshark\"), biomes[3], 192, 96);\r\n    }\r\n    if (biomes.length > 4) { //jellyshroom\r\n        addCreatureAtRandomizedPosition(cols, objects, illum, { mainTexture: \"crabsnake1\" }, biomes[4], 192, 144, 0.5);\r\n        addCreatureAtRandomizedPosition(cols, objects, illum, { mainTexture: \"crabsnake2\" }, biomes[4], 256, 32, 0.5);\r\n    }\r\n    if (biomes.length > 5) { //grand reef\r\n        addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"ghostlevi\"), biomes[5], 576, 192, 0.2, 0.5);\r\n        for (let i = 0; i < 3; i++) {\r\n            const idx = getRandomBetween(1, 2);\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"deepstalker\" + idx), biomes[5], idx == 1 ? 192 : 256, idx == 1 ? 102 : 96, 0.5, 0.8);\r\n        }\r\n    }\r\n    if (biomes.length > 6) { //bkelp\r\n        addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"ampeel2\"), biomes[6], 256, 160);\r\n        addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"warper\"), biomes[6], 128, 96);\r\n    }\r\n    if (biomes.length > 7 && lrdata) { //lr\r\n        const prY = biomes[7].height[lrdata.shaftLocation].bottomRow - getRandomBetween(3, 6) - 5;\r\n        for (let i = 0; i < 2; i++) {\r\n            flipWithChance(addObjectOfSizeAt(objects, illum, createDualTexture(\"prowler\"), lrdata.shaftLocation + getRandomBetween(-2, 2), prY - i, 192, 120), 0.5);\r\n            flipWithChance(addObjectOfSizeAt(objects, illum, createDualTexture(\"prowler\"), lrdata.middleLakeXCenter + getRandomBetween(-2, 2), lrdata.middleLakeLevel - 2 - i, 192, 120), 0.5);\r\n            flipWithChance(addObjectOfSizeAt(objects, illum, createDualTexture(\"prowler\"), lrdata.skullX + getRandomBetween(-2, 2), lrdata.skullY + getRandomBetween(-3, 1) - i, 192, 120), 0.5);\r\n        }\r\n        const n = getRandomBetween(0, 6);\r\n        if (n != 0)\r\n            addObjectOfSizeAt(objects, illum, createFullGlowTexture(\"ghostrays1\"), lrdata.treeX - 3.5, lrdata.treeY - 2, 480, 270);\r\n        if (n != 1)\r\n            addObjectOfSizeAt(objects, illum, createFullGlowTexture(\"ghostrays2\"), lrdata.treeX - 3.5, lrdata.treeY - 2, 480, 270);\r\n    }\r\n    if (biomes.length > 8) { //ilz\r\n        if (Math.random() <= 0.5)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"dragon\"), biomes[8], 640, 320, 0.4);\r\n        if (Math.random() <= 0.67)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, { mainTexture: \"crimsonray1\" }, biomes[8], 256, 128);\r\n        if (Math.random() <= 0.67)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, { mainTexture: \"crimsonray2\" }, biomes[8], 256, 128);\r\n        if (Math.random() <= 0.8)\r\n            addCreatureAtRandomizedPosition(cols, objects, illum, createDualTexture(\"larva\"), biomes[8], 64, 32);\r\n    }\r\n}\r\nfunction generateSmallCreatures(rows, cols, tiles, biomes, objects, illum, kelpcaves, towers, lrdata) {\r\n    for (const biome of biomes) {\r\n        const n = Math.max(5, (biome.lowest - biome.highest) * 0.8);\r\n        for (let i = 0; i < n; i++) {\r\n            const gen = getRandomSmallFish(biome);\r\n            if (gen) {\r\n                let x = getRandomBetween(0, cols - 1);\r\n                let y = Math.min(rows - 1, Math.round(getRandomBetween(biome.index == 0 ? 0 : biome.height[x].airCeiling + 1, biome.height[x].solidFloor - 1)));\r\n                const idx = getArrayIndex(cols, rows, x, y);\r\n                if (idx >= tiles.length || idx < 0 || !tiles[idx].isAir) {\r\n                    continue;\r\n                }\r\n                const n2 = gen.mainTexture != \"biter\" && gen.mainTexture != \"blighter\" && gen.mainTexture != \"rabbitray\" && gen.mainTexture != \"mesmer2\" ? getRandomBetween(1, 3) : 1;\r\n                const ang = Math.random() < 0.33 && n2 > 1 ? getRandomBetween(-90, 90) : getRandomBetween(-30, 30);\r\n                const flip = Math.random() < 0.5;\r\n                for (let k = 0; k < n2; k++) {\r\n                    const elems = addObject(objects, illum, gen, x, y, getRandomBetween(-48, 48), getRandomBetween(-48, 48));\r\n                    setRotations(elems, ang);\r\n                    if (flip)\r\n                        mirrorXs(elems);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (kelpcaves) {\r\n        for (let i = 0; i < 16; i++) {\r\n            const idx = kelpcaves[getRandomBetween(0, kelpcaves.length - 1)];\r\n            const tile = tiles[idx];\r\n            setRandomRotations(addObject(objects, illum, createDualTexture(\"shuttlebug\"), tile.x, tile.y, getRandomBetween(-16, 16), getRandomBetween(-16, 16)), 180);\r\n        }\r\n    }\r\n}\r\nexport default function setPageBackground() {\r\n    if (isPhone)\r\n        return;\r\n    let w = 64 * SCALE;\r\n    let h = 64 * SCALE;\r\n    let x = 0;\r\n    let y = 0;\r\n    //var height = findHighestNode(0, document.documentElement.childNodes);\r\n    let body = document.body;\r\n    let html = document.documentElement;\r\n    var rh = document.body.offsetHeight; //Math.max(body.offsetHeight, html.clientHeight, html.offsetHeight, window.innerHeight, document.body.clientHeight);\r\n    var rw = Math.max(window.innerWidth, document.body.clientWidth);\r\n    //console.log(rw+\" x \"+rh);\r\n    let rows = Math.ceil(rh / h);\r\n    let cols = Math.ceil(rw / w);\r\n    let tw = cols * w;\r\n    let th = rows * h;\r\n    console.log(\"Generating subnautica tileset with \" + cols + \" columns and \" + rows + \" rows\");\r\n    let tag = \"background-content\";\r\n    let container = document.getElementById(tag);\r\n    if (container == null) {\r\n        container = document.createElement(\"div\");\r\n        container.id = tag;\r\n        console.log(\"Injecting background element.\");\r\n        document.body.prepend(container);\r\n    }\r\n    while (container.firstChild) {\r\n        container.removeChild(container.firstChild);\r\n    }\r\n    const biomes = allocateBiomes(rows, cols);\r\n    let tiles = new Array(cols * rows);\r\n    let grid = document.createElement(\"div\");\r\n    container.appendChild(grid);\r\n    grid.className = \"tile-layer\";\r\n    grid.style.width = rw.toString() + \"px\";\r\n    grid.style.height = rh.toString() + \"px\";\r\n    grid.classList.add(\"tile-layer\");\r\n    let objects = document.createElement(\"div\");\r\n    objects.style.width = rw.toString() + \"px\";\r\n    objects.style.height = rh.toString() + \"px\";\r\n    objects.style.position = \"relative\";\r\n    objects.style.left = \"0px\";\r\n    objects.style.top = \"0px\";\r\n    objects.classList.add(\"entity-layer\");\r\n    container.appendChild(objects);\r\n    let water = document.createElement(\"div\"); //water overlay, not the base underlay\r\n    water.style.width = rw.toString() + \"px\";\r\n    water.style.height = rh.toString() + \"px\";\r\n    water.style.position = \"relative\";\r\n    water.style.left = \"0px\";\r\n    water.style.top = \"0px\";\r\n    water.classList.add(\"tile-layer\");\r\n    container.appendChild(water);\r\n    let illum = document.createElement(\"div\");\r\n    illum.style.width = rw.toString() + \"px\";\r\n    illum.style.height = rh.toString() + \"px\";\r\n    illum.style.position = \"relative\";\r\n    illum.style.left = \"0px\";\r\n    illum.style.top = \"0px\";\r\n    illum.classList.add(\"entity-layer\");\r\n    //illum.classList.add(\"glow-layer\");\r\n    container.appendChild(illum);\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let k = 0; k < rows; k++) {\r\n            const idx = getArrayIndex(cols, rows, i, k);\r\n            const tile = {};\r\n            tile.x = i;\r\n            tile.y = k;\r\n            tile.biome = getBiomeAtRow(k, biomes, i);\r\n            tile.baseTexture = getRandomBiomeTerrain(i, k, tile.biome);\r\n            tiles[idx] = tile;\r\n        }\r\n    }\r\n    for (const biome of biomes) {\r\n        generateBiomeFloor(rows, cols, tiles, biome, 2, biome.biome.height.floorFraction, biome.biome.height.minFloorRows);\r\n    }\r\n    if (biomes.length > 4)\r\n        generateJellyshroomCave(rows, cols, tiles, biomes, objects, illum);\r\n    let towers = null;\r\n    if (biomes.length > 2) {\r\n        towers = generateGrassTowers(rows, cols, tiles, biomes);\r\n        generateRedGrass(rows, cols, tiles, biomes, objects, illum);\r\n    }\r\n    let kelpcaves = null;\r\n    if (biomes.length > 1) {\r\n        generateCreepvine(rows, cols, tiles, biomes, objects, illum);\r\n        kelpcaves = generateKelpCaves(rows, cols, tiles, biomes, objects, illum, towers);\r\n    }\r\n    if (biomes.length > 3)\r\n        generateKoosh(rows, cols, tiles, biomes, objects, illum);\r\n    if (biomes.length > 5)\r\n        generateReefPods(rows, cols, tiles, biomes, objects, illum);\r\n    if (biomes.length > 6)\r\n        generateBloodKelp(rows, cols, tiles, biomes, objects, illum);\r\n    let lrdata = null;\r\n    if (biomes.length > 7) {\r\n        lrdata = generateLostRiverCave(rows, cols, tiles, biomes, objects, illum); //includes cove\r\n        if (biomes.length > 8)\r\n            generateILZCave(rows, cols, tiles, biomes, lrdata.shaftLocation, objects, illum);\r\n    }\r\n    generateGroundDeco(rows, cols, tiles, biomes, lrdata, objects, illum);\r\n    generateSmallCreatures(rows, cols, tiles, biomes, objects, illum, kelpcaves, towers, lrdata);\r\n    generateLargeCreatures(rows, cols, tiles, biomes, objects, illum, towers, lrdata);\r\n    buildImage(grid, water, rows, cols, tiles);\r\n    fitBCG(objects, SCALE);\r\n    fitBCG(illum, SCALE);\r\n}\r\n//window.addEventListener('resize', debounce(setPageBackground, 100));\r\n"],"sourceRoot":""}