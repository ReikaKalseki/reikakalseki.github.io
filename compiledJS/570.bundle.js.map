{"version":3,"sources":["webpack://sitecore/./node_modules/ts-debounce/dist/src/index.esm.js","webpack://sitecore/./fce/backgroundgen.ts"],"names":["r","e","n","i","t","o","a","isImmediate","u","callback","c","maxWait","v","Date","now","l","f","d","slice","call","arguments","this","Promise","clearTimeout","setTimeout","apply","forEach","resolve","push","reject","cancel","lavaCeilRow","lavaFloorRow","crystalColors","diamond","getRGB","emerald","ruby","sapphire","topaz","sugalite","addImageToRow","elem","img","tile","document","createElement","className","appendChild","setBlock","terrain","idx","console","log","setBottomBlock","length","addBlock","getTopBlock","li","undefined","getBottomBlock","getRandomRawGenBlockAt","x","y","rows","cold","toxic","lava","coldCtr","toxicCtr","ret","deep1","Math","random","deep2","modifyImageLocational","cols","genOreVein","ore","s","getOreVeinSize","mx","max","floor","my","px","min","py","ms","slopeX","slopeY","k","di","dk","dx","dy","top","idx2","isValidRock","rock","startsWith","getRandomOreType","list","abs","getRandomCrystal","setPageBackground","body","html","documentElement","rh","offsetHeight","clientHeight","window","innerHeight","rw","innerWidth","clientWidth","ceil","Array","lastColdCeil","lastColdFloor","lastToxicFloor","lastToxicCeil","lastLavaFloor","lastLavaCeil","crysw","magw","dd","coldCeil","coldFloor","toxicCeil","toxicFloor","lavaCeil","lavaFloor","gap1","gap2","blend","step","varr","flag","cm","cm2","generateLayers","veins","genOreVeins","generateCaves","generateResinBalls","t0","generateSurfaceResin","placed","cry","top2","includes","type","generateCrystals","tag","container","getElementById","id","prepend","firstChild","removeChild","style","width","toString","height","rgb","Object","entries","selector","sz","offset","styleSheets","addRule","g","b","row","imgs","imgsa","add","getComputedStyle","SCALE","buildImage","crystal","addEventListener"],"mappings":"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","file":"570.bundle.js","sourcesContent":["function r(r,e,n){var i,t,o;void 0===e&&(e=50),void 0===n&&(n={});var a=null!=(i=n.isImmediate)&&i,u=null!=(t=n.callback)&&t,c=n.maxWait,v=Date.now(),l=[];function f(){if(void 0!==c){var r=Date.now()-v;if(r+e>=c)return c-r}return e}var d=function(){var e=[].slice.call(arguments),n=this;return new Promise(function(i,t){var c=a&&void 0===o;if(void 0!==o&&clearTimeout(o),o=setTimeout(function(){if(o=void 0,v=Date.now(),!a){var i=r.apply(n,e);u&&u(i),l.forEach(function(r){return(0,r.resolve)(i)}),l=[]}},f()),c){var d=r.apply(n,e);return u&&u(d),i(d)}l.push({resolve:i,reject:t})})};return d.cancel=function(r){void 0!==o&&clearTimeout(o),l.forEach(function(e){return(0,e.reject)(r)}),l=[]},d}export{r as debounce};\n//# sourceMappingURL=index.esm.js.map\n","const SCALE = 2;\r\nconst coldMin = 0.22;\r\nconst coldMax = 0.28;\r\nconst toxicMin = 0.45;\r\nconst toxicMax = 0.55;\r\nconst lavaMin = 0.87;\r\nconst lavaMax = 0.95;\r\nconst coldVar = 0.02;\r\nconst toxicVar = 0.05;\r\nlet lavaCeilRow = 999;\r\nlet lavaFloorRow = 0;\r\nimport { xmas, getRandomBetween, getRandomDecimalBetween, getArrayIndex, fitBCG } from '../library';\r\nimport { debounce } from \"ts-debounce\";\r\nimport { isPhone } from '../browser';\r\nconst crystalColors = { diamond: getRGB(\"diamond\"), emerald: getRGB(\"emerald\"), ruby: getRGB(\"ruby\"), sapphire: getRGB(\"sapphire\"), topaz: getRGB(\"topaz\"), sugalite: getRGB(\"sugalite\") };\r\nfunction addImageToRow(elem, img) {\r\n    let tile = document.createElement('div');\r\n    tile.className = \"tile-fce-\" + img;\r\n    //tile.style.width = iw+\"px !important;\";\r\n    //tile.style.height = ih+\"px !important;\";\r\n    //if (img == \"bedrock\")\r\n    //add some bedrock tint if possible\r\n    elem.appendChild(tile);\r\n    return tile;\r\n}\r\nfunction buildImage(elem, rows, cols, terrain) {\r\n    //document.styleSheets[0].addRule('.red::after','color: green');\r\n    //console.log(document.styleSheets);\r\n    try {\r\n        for (let [type, rgb] of Object.entries(crystalColors)) {\r\n            let selector = \".tile-fce-gem_\" + type + \"::after\";\r\n            let sz = 1024; //512;\r\n            let offset = -sz / 2 + 32;\r\n            document.styleSheets[0].addRule(selector, \"width: \" + sz + \"px;\");\r\n            document.styleSheets[0].addRule(selector, \"height: \" + sz + \"px;\");\r\n            document.styleSheets[0].addRule(selector, \"top: \" + offset + \"px;\");\r\n            document.styleSheets[0].addRule(selector, \"left: \" + offset + \"px;\");\r\n            document.styleSheets[0].addRule(selector, \"background: radial-gradient(rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",255) 0%, rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",0) 70%);\");\r\n            document.styleSheets[0].addRule(selector, \"mix-blend-mode: color-dodge;\"); //color-dodge or screen\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(\"Could not access ruleset: \" + e);\r\n    }\r\n    var w = 64 * SCALE;\r\n    var h = 64 * SCALE;\r\n    var x = 0;\r\n    var y = 0;\r\n    for (var k = 0; k < rows; k++) {\r\n        x = 0;\r\n        let row = document.createElement(\"div\");\r\n        for (var i = 0; i < cols; i++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            let imgs = terrain[idx];\r\n            //console.log(\"Got \"+img+\" @ \"+i+\", \"+k);\r\n            if (xmas && imgs.length > 0 && imgs[imgs.length - 1] != \"cave\" && !imgs[imgs.length - 1].startsWith(\"gem\") && imgs[imgs.length - 1] != \"lava\" && (k < lavaCeilRow || k > lavaFloorRow)) {\r\n                var imgsa = k == 0 ? [\"cave\"] : terrain[getArrayIndex(cols, i, k - 1)];\r\n                if (imgsa.length > 0 && imgsa[imgsa.length - 1] == \"cave\")\r\n                    imgs.push(\"snow\");\r\n            }\r\n            let add = row;\r\n            for (var n = 0; n < imgs.length; n++) {\r\n                let img = imgs[n];\r\n                img = modifyImageLocational(rows, cols, terrain, i, k, idx, img);\r\n                add = addImageToRow(add, img);\r\n                if (img.includes(\"gem\")) {\r\n                    let style_rules = window.getComputedStyle(add, \"::after\");\r\n                    //setGlowColorAndBlend(style_rules, img.substring(\"_gem\".length));\r\n                }\r\n            }\r\n            x += w;\r\n        }\r\n        elem.appendChild(row);\r\n        y += h;\r\n    }\r\n    fitBCG(elem, SCALE / 2);\r\n}\r\nfunction isTransparent(img) {\r\n    switch (img) {\r\n        case \"air\":\r\n        case \"crystal\":\r\n        case \"lptbeam_v\":\r\n        case \"lptbeam_h\":\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction setBlock(terrain, idx, img) {\r\n    if (img == \"cave\")\r\n        console.log(\"ERROR: ADDED CAVE ON NULL\");\r\n    terrain[idx] = [];\r\n    terrain[idx].push(img);\r\n}\r\nfunction setBottomBlock(terrain, idx, img) {\r\n    if (terrain[idx] == null || terrain[idx].length == 0)\r\n        setBlock(terrain, idx, img);\r\n    else\r\n        terrain[idx][0] = img;\r\n}\r\nfunction addBlock(terrain, idx, img) {\r\n    //console.log(\"---\");\r\n    //console.log(terrain[idx]);\r\n    terrain[idx].push(img);\r\n    //console.log(terrain[idx]);\r\n    //console.log(\"---\");\r\n}\r\nfunction getTopBlock(terrain, idx) {\r\n    var li = terrain[idx];\r\n    var ret = li == undefined || li.length == 0 ? null : li[li.length - 1];\r\n    //if (ret == \"cave\")\r\n    //\tret = li.length >= 2 ? li[li.length-2] : null;\r\n    return ret;\r\n}\r\nfunction getBottomBlock(terrain, idx) {\r\n    var li = terrain[idx];\r\n    return li.length == 0 ? null : li[0];\r\n}\r\nfunction getRandomRawGenBlockAt(x, y, rows, cold, toxic, lava) {\r\n    var f = y / rows;\r\n    let coldCtr = cold[x];\r\n    var toxicCtr = toxic[x];\r\n    var lavaCtr = lava[x];\r\n    var ret = \"rock\";\r\n    var deep1 = f - (coldCtr - 0.1);\r\n    if (deep1 >= 0 && Math.random() * Math.random() * Math.random() * 0.8 < deep1) {\r\n        ret = \"bedrock\";\r\n    }\r\n    var deep2 = f - (toxicCtr - 0.1);\r\n    if (deep2 >= 0 && Math.random() * Math.random() * Math.random() * 0.8 < deep2) {\r\n        ret = \"deepstone\";\r\n    }\r\n    return ret;\r\n}\r\nfunction modifyImageLocational(rows, cols, terrain, x, y, idx, img) {\r\n    return img;\r\n}\r\nfunction getOreVeinSize(ore, y, rows) {\r\n    var f = y / rows;\r\n    var s = f < 0.2 ? 1 : 1 + (f - 0.2) * 0.75;\r\n    switch (ore) {\r\n        case \"hardresin\":\r\n            return [5, 5];\r\n        case \"cave\":\r\n            return [2 * s, 4 * s];\r\n        case \"biomass\":\r\n            return [1 * s, 1.5 * s];\r\n        case \"coal\":\r\n            return [1.5 * s, 2 * s];\r\n        default:\r\n            return [1.5 * s, 3 * s];\r\n    }\r\n}\r\nfunction genOreVein(rows, cols, terrain, x, y, ore, cold, toxic, lava) {\r\n    var s = getOreVeinSize(ore, y, rows);\r\n    //s[0] = 1;\r\n    //s[1] = 9;\r\n    var r = getRandomDecimalBetween(s[0], s[1]) * 0.675;\r\n    var mx = Math.max(0, Math.floor(x - r));\r\n    var my = Math.max(0, Math.floor(y - r));\r\n    var px = Math.min(cols - 1, Math.floor(x + r));\r\n    var py = Math.min(rows - 1, Math.floor(y + r));\r\n    var ms = 0.75;\r\n    var slopeX = getRandomDecimalBetween(-ms, ms);\r\n    var slopeY = getRandomDecimalBetween(-ms, ms);\r\n    //console.log(\"Generated ore type \"+ore+\" @ \"+x+\", \"+y+\" with sizes \"+rx+\", \"+ry+\" to range \"+mx+\"->\"+px+\"; \"+my+\"->\"+py+\"; slopes are \"+slopeX+\", \"+slopeY);\r\n    var l = ore == \"hardresin\" ? 0 : (ore == \"cave\" ? r * 3.5 : r * 2);\r\n    for (var d = 0; d <= l; d++) {\r\n        for (var i = mx; i <= px; i++) {\r\n            for (var k = my; k <= py; k++) {\r\n                var di = i - x;\r\n                var dk = k - y;\r\n                if (di * di + dk * dk <= r * r + 0.25) {\r\n                    var dx = Math.floor(i + d * slopeX);\r\n                    var dy = Math.floor(k + d * slopeY);\r\n                    let idx = getArrayIndex(cols, dx, dy);\r\n                    if (ore == \"hardresin\")\r\n                        setBlock(terrain, idx, ore);\r\n                    else if (ore == \"cave\") {\r\n                        if (terrain[idx] != null && terrain[idx].length > 0) {\r\n                            var top = getTopBlock(terrain, idx);\r\n                            if (top != \"cave\" && top != \"lava\" && top != \"crystal\" && top != \"magmarock\" && top != \"hardresin\") {\r\n                                var idx2 = dy == 0 ? -1 : getArrayIndex(cols, dx, dy - 1);\r\n                                if (idx2 < 0 || (terrain[idx2] != null && terrain[idx2].length > 0 && getTopBlock(terrain, idx2) != \"lava\"))\r\n                                    addBlock(terrain, idx, ore);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (terrain[idx] == null || isValidRock(ore, getBottomBlock(terrain, idx)))\r\n                        setBottomBlock(terrain, idx, ore);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isValidRock(ore, rock) {\r\n    if (ore == \"hardresin\")\r\n        return true;\r\n    if (ore == \"biomass\")\r\n        return rock != null && rock.startsWith(\"deepstone_g\");\r\n    return rock == \"deepstone\" || rock == \"bedrock\" || rock == \"rock\";\r\n}\r\nfunction getRandomOreType(rows, x, y, cold, toxic, lava) {\r\n    var f = y / rows;\r\n    var list = [\"coal\", \"copper\", \"tin\"];\r\n    if (f > cold[x] - 0.12) {\r\n        list.push(\"iron\");\r\n    }\r\n    if (f > cold[x] - 0.06) {\r\n        list.push(\"lithium\");\r\n    }\r\n    if (f > cold[x] + 0.05) {\r\n        list.push(\"gold\");\r\n        list.push(\"nickel\");\r\n        list.push(\"titanium\");\r\n    }\r\n    if (Math.abs(f - toxic[x]) <= 0.1) {\r\n        list.push(\"biomass\");\r\n    }\r\n    if (f > toxic[x] + 0.05) {\r\n        //list.push(\"molybdenum\");\r\n        list.push(\"chromium\");\r\n    }\r\n    return list[Math.floor(Math.random() * list.length)];\r\n}\r\nfunction genOreVeins(rows, cols, terrain, cold, toxic, lava) {\r\n    var veins = rows * cols / 32;\r\n    //veins = 1;\r\n    for (var i = 0; i < veins; i++) {\r\n        var x = Math.floor(Math.random() * cols);\r\n        var y = Math.floor(Math.random() * rows);\r\n        var ore = getRandomOreType(rows, x, y, cold, toxic, lava);\r\n        genOreVein(rows, cols, terrain, x, y, ore, cold, toxic, lava);\r\n        //console.log(\"Generated \"+ore+\" at \"+x+\", \"+y);\r\n    }\r\n}\r\nfunction generateLayers(rows, cols, terrain, cold, toxic, lava) {\r\n    var lastColdCeil = -1;\r\n    var lastColdFloor = -1;\r\n    var lastToxicFloor = -1;\r\n    var lastToxicCeil = -1;\r\n    var lastLavaFloor = -1;\r\n    var lastLavaCeil = -1;\r\n    var crysw = getRandomBetween(-3, 4);\r\n    var magw = getRandomBetween(-3, 4);\r\n    var dd = Math.max(1, rows / 100);\r\n    for (var i = 0; i < cols; i++) {\r\n        var coldCeil = Math.floor(cold[i] * rows) - getRandomBetween(1, 4) * dd;\r\n        var coldFloor = Math.floor(cold[i] * rows) + getRandomBetween(0, 1) * dd;\r\n        var toxicCeil = Math.floor(toxic[i] * rows) - getRandomBetween(2, 4) * dd;\r\n        var toxicFloor = Math.floor(toxic[i] * rows) + getRandomBetween(2, 4) * dd;\r\n        var lavaCeil = Math.floor(lava[i] * rows) - getRandomBetween(2, 4) * dd;\r\n        var lavaFloor = Math.floor(lava[i] * rows) + getRandomBetween(1, 3) * dd;\r\n        if (i > 0) {\r\n            coldCeil = Math.max(Math.min(coldCeil, lastColdCeil + 0.5), lastColdCeil - 0.5);\r\n            coldFloor = Math.max(Math.min(coldFloor, lastColdFloor + 0.25), lastColdFloor - 0.25);\r\n            toxicCeil = Math.max(Math.min(toxicCeil, lastToxicCeil + 1), lastToxicCeil - 1);\r\n            toxicFloor = Math.max(Math.min(toxicFloor, lastToxicFloor + 0.5), lastToxicFloor - 0.5);\r\n            lavaCeil = Math.max(Math.min(lavaCeil, lastLavaCeil + 1), lastLavaCeil - 1);\r\n            lavaFloor = Math.max(Math.min(lavaFloor, lastLavaFloor + 0.25), lastLavaFloor - 0.25);\r\n        }\r\n        lavaCeilRow = Math.min(lavaCeilRow, Math.floor(lavaCeil));\r\n        lavaFloorRow = Math.max(lavaFloorRow, Math.ceil(lavaFloor));\r\n        for (var k = 0; k < rows; k++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            if (k >= coldCeil && k <= coldFloor) {\r\n                setBlock(terrain, idx, \"deepstone_b1\");\r\n                if (k != Math.ceil(coldCeil) && k != Math.floor(coldFloor))\r\n                    addBlock(terrain, idx, \"cave\");\r\n            }\r\n            if (k >= toxicCeil && k <= toxicFloor) {\r\n                setBlock(terrain, idx, \"deepstone_g1\");\r\n                if (k != Math.ceil(toxicCeil) && k != Math.floor(toxicFloor))\r\n                    addBlock(terrain, idx, \"cave\");\r\n            }\r\n            if (k >= lavaCeil && k <= lavaFloor) {\r\n                if (k != Math.floor(lavaFloor) && k >= Math.floor(lavaMax * rows) - 1 * dd) {\r\n                    setBlock(terrain, idx, \"lava\");\r\n                }\r\n                else {\r\n                    setBlock(terrain, idx, \"deepstone_o1\");\r\n                    if (k != Math.ceil(lavaCeil) && k != Math.floor(lavaFloor))\r\n                        addBlock(terrain, idx, \"cave\");\r\n                }\r\n            }\r\n        }\r\n        var gap1 = toxicCeil - coldFloor;\r\n        var gap2 = lavaCeil - toxicFloor;\r\n        var blend = Math.min(6, Math.max(1, Math.floor(Math.min(gap1, gap2) / 4)));\r\n        var step = Math.min(6, 6 / blend);\r\n        //console.log(\"Gaps \"+gap1+\", \"+gap2+\" -> \"+blend+\", \"+step);\r\n        for (var d = -blend; d < 0; d++) {\r\n            var varr = step == 6 ? 3 : Math.floor(((-d + 1) * step));\r\n            if (varr <= 6) {\r\n                setBlock(terrain, getArrayIndex(cols, i, d + Math.ceil(coldCeil)), \"deepstone_b\" + varr);\r\n                setBlock(terrain, getArrayIndex(cols, i, -d + Math.floor(coldFloor)), \"deepstone_b\" + varr);\r\n                setBlock(terrain, getArrayIndex(cols, i, d + Math.ceil(toxicCeil)), \"deepstone_g\" + varr);\r\n                setBlock(terrain, getArrayIndex(cols, i, -d + Math.floor(toxicFloor)), \"deepstone_g\" + varr);\r\n                setBlock(terrain, getArrayIndex(cols, i, d + Math.ceil(lavaCeil)), \"deepstone_o\" + varr);\r\n                setBlock(terrain, getArrayIndex(cols, i, -d + Math.floor(lavaFloor)), \"deepstone_o\" + varr);\r\n            }\r\n            //console.log(varr+\" @ \"+d);\r\n        }\r\n        lastColdFloor = coldFloor;\r\n        lastColdCeil = coldCeil;\r\n        lastToxicFloor = toxicFloor;\r\n        lastToxicCeil = toxicCeil;\r\n        lastLavaFloor = lavaFloor;\r\n        lastLavaCeil = lavaCeil;\r\n        var flag = false;\r\n        if (crysw <= -4) {\r\n            crysw = getRandomBetween(2, 4);\r\n            flag = true;\r\n        }\r\n        if (crysw > 0) {\r\n            var cm = coldCeil + 1;\r\n            var cm2 = coldFloor - 1;\r\n            if (flag || crysw == 1) {\r\n                cm = getRandomBetween(cm, cm + 1);\r\n                cm2 = Math.max(cm, getRandomBetween(cm2 - 3, cm2));\r\n            }\r\n            for (var k = cm; k <= cm2; k++) {\r\n                var idx = getArrayIndex(cols, i, k);\r\n                //if (getTopBlock(terrain, idx) == \"cave\")\r\n                setBlock(terrain, idx, \"crystal\");\r\n            }\r\n        }\r\n        crysw--;\r\n        if (magw <= -4) {\r\n            magw = getRandomBetween(1, 4);\r\n        }\r\n        if (magw > 0) {\r\n            var cm = lavaCeil + 1;\r\n            cm = getRandomBetween(cm, cm + 3);\r\n            var cm2 = lavaFloor - 1;\r\n            for (var k = cm; k <= cm2; k++) {\r\n                var idx = getArrayIndex(cols, i, k);\r\n                if (getTopBlock(terrain, idx) == \"cave\")\r\n                    setBlock(terrain, idx, \"magmarock\");\r\n            }\r\n        }\r\n        magw--;\r\n    }\r\n}\r\nfunction generateCaves(rows, cols, terrain, cold, toxic, lava) {\r\n    for (var i = 0; i < rows / 2.5; i++) {\r\n        var x = getRandomBetween(0, cols);\r\n        var y = getRandomBetween(0, rows);\r\n        genOreVein(rows, cols, terrain, x, y, \"cave\", cold, toxic, lava);\r\n    }\r\n}\r\nfunction generateResinBalls(rows, cols, terrain, cold, toxic, lava) {\r\n    for (var i = 0; i < rows / 40; i++) {\r\n        var x = getRandomBetween(6, cols - 6);\r\n        var y = getRandomBetween(Math.floor(cold[x] * rows / 2), Math.floor(lava[x] * rows - 12));\r\n        genOreVein(rows, cols, terrain, x, y, \"hardresin\", cold, toxic, lava);\r\n    }\r\n}\r\nfunction generateSurfaceResin(rows, cols, terrain) {\r\n    var t0 = getRandomBetween(0, 4);\r\n    for (var i = 0; i < cols; i++) {\r\n        var t = Math.max(t0 - 1, Math.min(t0 + 1, getRandomBetween(0, 4)));\r\n        for (var k = 0; k < t; k++) {\r\n            var idx = getArrayIndex(cols, i, k);\r\n            setBlock(terrain, idx, \"resin\");\r\n        }\r\n        t0 = t;\r\n    }\r\n}\r\nfunction getRandomCrystal(y, rows, cold, toxic, lava) {\r\n    var f = y / rows;\r\n    var list = [];\r\n    if (f < cold / 2) {\r\n        list.push(\"diamond\");\r\n    }\r\n    if (f > cold / 2 && f < cold - 0.04) {\r\n        list.push(\"emerald\");\r\n    }\r\n    if (f > cold + 0.02 && f < (cold + toxic) / 2) {\r\n        list.push(\"ruby\");\r\n    }\r\n    if (f > (cold + toxic) / 2 && f < toxic - 0.04) {\r\n        list.push(\"sapphire\");\r\n    }\r\n    if (Math.abs(f - toxic) < 0.05) {\r\n        list.push(\"topaz\");\r\n    }\r\n    if (f > toxic + 0.07) {\r\n        list.push(\"sugalite\");\r\n    }\r\n    return list.length == 0 ? null : list[Math.floor(Math.random() * list.length)];\r\n}\r\n/*\r\nfunction generateCrystalGlow(elem:HTMLElement, x:number, y:number, r:number, g:number, b:number) {\r\n    r *= 0.85;\r\n    g *= 0.85;\r\n    b *= 0.85;\r\n    var line = document.createElementNS('http://www.w3.org/2000/svg', 'ellipse');\r\n    line.setAttributeNS(null, \"cx\", ((x+0.5)*16*SCALE).toString());\r\n    line.setAttributeNS(null, \"cy\", ((y+0.5)*16*SCALE).toString());\r\n    line.setAttributeNS(null, \"rx\", (5*16*SCALE).toString());\r\n    line.setAttributeNS(null, \"ry\", (5*16*SCALE).toString());\r\n    line.setAttributeNS(null, \"fill\", \"rgb(\"+r+\", \"+g+\", \"+b+\")\");\r\n    line.setAttributeNS(null, \"style\", \"mix-blend-mode: screen; filter: blur(32px);\");\r\n    elem.appendChild(line);\r\n}*/\r\nfunction generateCrystals(rows, cols, terrain, cold, toxic, lava) {\r\n    var placed = [];\r\n    for (var i = 0; i < rows * 3; i++) {\r\n        var x = getRandomBetween(2, cols - 2);\r\n        var y = getRandomBetween(6, rows - 2);\r\n        var cry = getRandomCrystal(y, rows, cold[x], toxic[x], lava[x]);\r\n        if (cry == null)\r\n            continue;\r\n        var idx = getArrayIndex(cols, x, y);\r\n        var top = getTopBlock(terrain, idx);\r\n        var top2 = getTopBlock(terrain, getArrayIndex(cols, x, y + 1));\r\n        if (top == \"cave\" && top2 != \"cave\" && top2 != \"lava\" && (top2 == null || !top2.includes(\"gem\"))) {\r\n            addBlock(terrain, idx, \"gem_\" + cry);\r\n            //generateCrystalGlow(elem, rows, cols, terrain, x, y, idx);\r\n            placed.push({ x: x * 64, y: y * 64, type: cry });\r\n        }\r\n    }\r\n    return placed;\r\n}\r\nexport default function setPageBackground() {\r\n    if (isPhone)\r\n        return;\r\n    let w = 16 * SCALE;\r\n    let h = 16 * SCALE;\r\n    let x = 0;\r\n    let y = 0;\r\n    //var height = findHighestNode(0, document.documentElement.childNodes);\r\n    let body = document.body;\r\n    let html = document.documentElement;\r\n    var rh = Math.max(body.offsetHeight, html.clientHeight, html.offsetHeight, window.innerHeight, document.body.clientHeight);\r\n    var rw = Math.max(window.innerWidth, document.body.clientWidth);\r\n    //console.log(rw+\" x \"+rh);\r\n    let rows = Math.ceil(rh / h) + 1;\r\n    let cols = Math.ceil(rw / w);\r\n    let tw = cols * w;\r\n    let th = rows * h;\r\n    console.log(\"Generating FCE chunk slice tileset with \" + cols + \" columns and \" + rows + \" rows\");\r\n    let terrain = new Array(cols * rows);\r\n    let cold = new Array(cols);\r\n    let toxic = new Array(cols);\r\n    let lava = new Array(cols);\r\n    for (var i = 0; i < cols; i++) {\r\n        cold[i] = getRandomDecimalBetween(coldMin, coldMax);\r\n        toxic[i] = getRandomDecimalBetween(toxicMin, toxicMax);\r\n        lava[i] = getRandomDecimalBetween(lavaMin, lavaMax);\r\n        if (i > 0) {\r\n            cold[i] = Math.max(Math.min(cold[i], cold[i - 1] + 1), cold[i - 1] - 1);\r\n            toxic[i] = Math.max(Math.min(toxic[i], toxic[i - 1] + 2), toxic[i - 1] - 2);\r\n            lava[i] = Math.max(Math.min(lava[i], lava[i - 1] + 1), lava[i - 1] - 1);\r\n        }\r\n    }\r\n    for (var i = 0; i < cols; i++) {\r\n        for (var k = 0; k < rows; k++) {\r\n            let img = getRandomRawGenBlockAt(i, k, rows, cold, toxic, lava);\r\n            let idx = getArrayIndex(cols, i, k);\r\n            terrain[idx] = null;\r\n            setBlock(terrain, idx, img);\r\n        }\r\n    }\r\n    generateLayers(rows, cols, terrain, cold, toxic, lava);\r\n    genOreVeins(rows, cols, terrain, cold, toxic, lava);\r\n    generateCaves(rows, cols, terrain, cold, toxic, lava);\r\n    generateResinBalls(rows, cols, terrain, cold, toxic, lava);\r\n    generateSurfaceResin(rows, cols, terrain);\r\n    let crys = generateCrystals(rows, cols, terrain, cold, toxic, lava);\r\n    //generateLPTs(rows, cols, terrain);\r\n    /*\r\n    for (var i = 0; i < crys.length; i++) {\r\n        let cry = crys[i];\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n        switch(cry.type) {\r\n            case \"diamond\":\r\n                r = 224;\r\n                g = 234;\r\n                b = 240;\r\n                break;\r\n            case \"emerald\":\r\n                r = 78;\r\n                g = 221;\r\n                break;\r\n            case \"ruby\":\r\n                r = 229;\r\n                g = 19;\r\n                break;\r\n            case \"sapphire\":\r\n                r = 36;\r\n                g = 87;\r\n                b = 242;\r\n                break;\r\n            case \"topaz\":\r\n                r = 245;\r\n                g = 195;\r\n                b = 67;\r\n                break;\r\n            case \"sugalite\":\r\n                r = 195;\r\n                g = 22;\r\n                b = 229;\r\n                break;\r\n        }\r\n        generateCrystalGlow(elem, cry.x, cry.y, r, g, b);\r\n    }*/\r\n    let tag = \"background-content\";\r\n    let container = document.getElementById(tag);\r\n    if (container == null) {\r\n        container = document.createElement(\"div\");\r\n        container.id = tag;\r\n        console.log(\"Injecting background element.\");\r\n        document.body.prepend(container);\r\n    }\r\n    while (container.firstChild) {\r\n        container.removeChild(container.firstChild);\r\n    }\r\n    container.className = \"tile-layer\";\r\n    container.style.width = rw.toString() + \"px\";\r\n    container.style.height = rh.toString() + \"px\";\r\n    //console.log(elem);\r\n    buildImage(container, rows, cols, terrain);\r\n    /*\r\n        for (var i = 0; i < crys.length; i++) {\r\n            let cry = crys[i];\r\n            let glow = addImageToRow(container, \"glow\");\r\n            glow.style.left = cry.x+\"px\";\r\n            glow.style.top = cry.y+\"px\";\r\n            setGlowColorAndBlend(glow, cry.type);\r\n        }*/\r\n}\r\nfunction setGlowColorAndBlend(elem, type) {\r\n    let rgb = getRGB(type);\r\n    /*\r\n    let val0 = RGBtoHSV(255, 0, 0).v;\r\n    let hsv = RGBtoHSV(rgb.r, rgb.g, rgb.b);\r\n    elem.style.filter = \"hue-rotate(\" + hsv.h + \"deg) saturate(\" + hsv.s + \") brightness(\" + hsv.v/val0*2 + \")\";\r\n    //elem.style.setProperty(\"mix-blend-mode\", \"screen\");\r\n    */\r\n    elem.width = \"512px;\";\r\n    elem.height = \"512px;\";\r\n    elem.top = \"-256px;\";\r\n    elem.left = \"-256px;\";\r\n    elem.background = \"radial-gradient(rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",255),rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",0));\";\r\n    elem.setProperty(\"mix-blend-mode\", \"screen\");\r\n}\r\nfunction getRGB(crystal) {\r\n    let r = 0;\r\n    let g = 0;\r\n    let b = 0;\r\n    switch (crystal) {\r\n        case \"diamond\":\r\n            r = 224;\r\n            g = 234;\r\n            b = 240;\r\n            break;\r\n        case \"emerald\":\r\n            r = 78;\r\n            g = 221;\r\n            break;\r\n        case \"ruby\":\r\n            r = 229;\r\n            g = 19;\r\n            break;\r\n        case \"sapphire\":\r\n            r = 36;\r\n            g = 87;\r\n            b = 242;\r\n            break;\r\n        case \"topaz\":\r\n            r = 245;\r\n            g = 195;\r\n            b = 67;\r\n            break;\r\n        case \"sugalite\":\r\n            r = 195;\r\n            g = 22;\r\n            b = 229;\r\n            break;\r\n    }\r\n    return {\r\n        r: r,\r\n        g: g,\r\n        b: b\r\n    };\r\n}\r\nwindow.addEventListener('resize', debounce(setPageBackground, 100));\r\n"],"sourceRoot":""}